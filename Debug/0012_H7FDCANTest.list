
0012_H7FDCANTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c04  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08004f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  24000074  08004fcc  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240001a4  08004fcc  000201a4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d791  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000199f  00000000  00000000  0002d833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a78  00000000  00000000  0002f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009b0  00000000  00000000  0002fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036030  00000000  00000000  00030600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b582  00000000  00000000  00066630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a9b2  00000000  00000000  00071bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cc564  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f20  00000000  00000000  001cc5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004e8c 	.word	0x08004e8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08004e8c 	.word	0x08004e8c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_FDCAN_RxFifo0Callback>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d014      	beq.n	80003be <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 ffee 	bl	800137c <HAL_FDCAN_GetRxMessage>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80003a6:	f000 f981 	bl	80006ac <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003aa:	2200      	movs	r2, #0
 80003ac:	2101      	movs	r1, #1
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f001 f952 	bl	8001658 <HAL_FDCAN_ActivateNotification>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80003ba:	f000 f977 	bl	80006ac <Error_Handler>
    }
  }
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	240000e4 	.word	0x240000e4
 80003cc:	240000b4 	.word	0x240000b4

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d4:	f000 fb26 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d8:	f000 f850 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003dc:	f000 f94c 	bl	8000678 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80003e0:	f000 f8ca 	bl	8000578 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 80003e4:	4821      	ldr	r0, [pc, #132]	; (800046c <main+0x9c>)
 80003e6:	f000 ff43 	bl	8001270 <HAL_FDCAN_Start>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <main+0x24>
  {
   Error_Handler();
 80003f0:	f000 f95c 	bl	80006ac <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_TX_EVT_FIFO_NEW_DATA , 0) != HAL_OK)
 80003f4:	2200      	movs	r2, #0
 80003f6:	f241 0101 	movw	r1, #4097	; 0x1001
 80003fa:	481c      	ldr	r0, [pc, #112]	; (800046c <main+0x9c>)
 80003fc:	f001 f92c 	bl	8001658 <HAL_FDCAN_ActivateNotification>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <main+0x3a>
  {
    /* Notification Error */
    Error_Handler();
 8000406:	f000 f951 	bl	80006ac <Error_Handler>
  }

  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x65D;
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <main+0xa0>)
 800040c:	f240 625d 	movw	r2, #1629	; 0x65d
 8000410:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <main+0xa0>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <main+0xa0>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <main+0xa0>)
 8000420:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000424:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <main+0xa0>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <main+0xa0>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <main+0xa0>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <main+0xa0>)
 800043a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800043e:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <main+0xa0>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf((char *)TxData1, "12345678" );
 8000446:	490b      	ldr	r1, [pc, #44]	; (8000474 <main+0xa4>)
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <main+0xa8>)
 800044a:	f004 f8bf 	bl	80045cc <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader1, TxData1)!= HAL_OK)
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <main+0xa8>)
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <main+0xa0>)
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <main+0x9c>)
 8000454:	f000 ff37 	bl	80012c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <main+0x92>
	  {
	   Error_Handler();
 800045e:	f000 f925 	bl	80006ac <Error_Handler>
	  }

	  HAL_Delay (1000);
 8000462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000466:	f000 fb6f 	bl	8000b48 <HAL_Delay>
  {
 800046a:	e7ec      	b.n	8000446 <main+0x76>
 800046c:	240000ec 	.word	0x240000ec
 8000470:	24000090 	.word	0x24000090
 8000474:	08004ea4 	.word	0x08004ea4
 8000478:	240000dc 	.word	0x240000dc

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b09c      	sub	sp, #112	; 0x70
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000486:	224c      	movs	r2, #76	; 0x4c
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f004 f896 	bl	80045bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2220      	movs	r2, #32
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f004 f890 	bl	80045bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800049c:	2002      	movs	r0, #2
 800049e:	f002 f813 	bl	80024c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	4b32      	ldr	r3, [pc, #200]	; (8000570 <SystemClock_Config+0xf4>)
 80004a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004aa:	4a31      	ldr	r2, [pc, #196]	; (8000570 <SystemClock_Config+0xf4>)
 80004ac:	f023 0301 	bic.w	r3, r3, #1
 80004b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004b2:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <SystemClock_Config+0xf4>)
 80004b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <SystemClock_Config+0xf8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004c4:	4a2b      	ldr	r2, [pc, #172]	; (8000574 <SystemClock_Config+0xf8>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <SystemClock_Config+0xf8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004d8:	bf00      	nop
 80004da:	4b26      	ldr	r3, [pc, #152]	; (8000574 <SystemClock_Config+0xf8>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e6:	d1f8      	bne.n	80004da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e8:	2302      	movs	r3, #2
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f0:	2340      	movs	r3, #64	; 0x40
 80004f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	2302      	movs	r3, #2
 80004f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f8:	2300      	movs	r3, #0
 80004fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004fc:	2304      	movs	r3, #4
 80004fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000500:	230a      	movs	r3, #10
 8000502:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000504:	2302      	movs	r3, #2
 8000506:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000510:	230c      	movs	r3, #12
 8000512:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000514:	2302      	movs	r3, #2
 8000516:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000522:	4618      	mov	r0, r3
 8000524:	f002 f80a 	bl	800253c <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800052e:	f000 f8bd 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	233f      	movs	r3, #63	; 0x3f
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2303      	movs	r3, #3
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2101      	movs	r1, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fc1e 	bl	8002d98 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000562:	f000 f8a3 	bl	80006ac <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3770      	adds	r7, #112	; 0x70
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	58000400 	.word	0x58000400
 8000574:	58024800 	.word	0x58024800

08000578 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800057e:	4b3c      	ldr	r3, [pc, #240]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000580:	4a3c      	ldr	r2, [pc, #240]	; (8000674 <MX_FDCAN2_Init+0xfc>)
 8000582:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000584:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800058a:	4b39      	ldr	r3, [pc, #228]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000592:	2201      	movs	r2, #1
 8000594:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000596:	4b36      	ldr	r3, [pc, #216]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000598:	2200      	movs	r2, #0
 800059a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800059c:	4b34      	ldr	r3, [pc, #208]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 12;
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005a4:	220c      	movs	r2, #12
 80005a6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80005a8:	4b31      	ldr	r3, [pc, #196]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 11;
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005b0:	220b      	movs	r2, #11
 80005b2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80005b4:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80005d2:	4b27      	ldr	r3, [pc, #156]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005da:	2201      	movs	r2, #1
 80005dc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000604:	2204      	movs	r2, #4
 8000606:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 800060a:	2200      	movs	r2, #0
 800060c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000610:	2200      	movs	r2, #0
 8000612:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 24;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000616:	2218      	movs	r2, #24
 8000618:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 800061c:	2200      	movs	r2, #0
 800061e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000622:	2204      	movs	r2, #4
 8000624:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000628:	f000 fbce 	bl	8000dc8 <HAL_FDCAN_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000632:	f000 f83b 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID ;
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800063e:	2302      	movs	r3, #2
 8000640:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0_HP;
 8000642:	2305      	movs	r3, #5
 8000644:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x00 ;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x00 ;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  if(HAL_FDCAN_ConfigFilter(&hfdcan2 , &sFilterConfig) != HAL_OK) Error_Handler();
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_FDCAN2_Init+0xf8>)
 8000658:	f000 fd94 	bl	8001184 <HAL_FDCAN_ConfigFilter>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_FDCAN2_Init+0xee>
 8000662:	f000 f823 	bl	80006ac <Error_Handler>


  /* USER CODE END FDCAN2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	240000ec 	.word	0x240000ec
 8000674:	4000a400 	.word	0x4000a400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_GPIO_Init+0x30>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <MX_GPIO_Init+0x30>)
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_GPIO_Init+0x30>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	58024400 	.word	0x58024400

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_MspInit+0x30>)
 80006c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x30>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x30>)
 80006d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	58024400 	.word	0x58024400

080006ec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b8      	sub	sp, #224	; 0xe0
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	22bc      	movs	r2, #188	; 0xbc
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f003 ff55 	bl	80045bc <memset>
  if(hfdcan->Instance==FDCAN2)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a2d      	ldr	r2, [pc, #180]	; (80007cc <HAL_FDCAN_MspInit+0xe0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d152      	bne.n	80007c2 <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800071c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000720:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000722:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000726:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fe63 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000738:	f7ff ffb8 	bl	80006ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <HAL_FDCAN_MspInit+0xe4>)
 800073e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_FDCAN_MspInit+0xe4>)
 8000744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000748:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <HAL_FDCAN_MspInit+0xe4>)
 800074e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_FDCAN_MspInit+0xe4>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <HAL_FDCAN_MspInit+0xe4>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_FDCAN_MspInit+0xe4>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000790:	2309      	movs	r3, #9
 8000792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800079a:	4619      	mov	r1, r3
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <HAL_FDCAN_MspInit+0xe8>)
 800079e:	f001 fce3 	bl	8002168 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2014      	movs	r0, #20
 80007a8:	f000 fad9 	bl	8000d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80007ac:	2014      	movs	r0, #20
 80007ae:	f000 faf0 	bl	8000d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2016      	movs	r0, #22
 80007b8:	f000 fad1 	bl	8000d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80007bc:	2016      	movs	r0, #22
 80007be:	f000 fae8 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	37e0      	adds	r7, #224	; 0xe0
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	4000a400 	.word	0x4000a400
 80007d0:	58024400 	.word	0x58024400
 80007d4:	58020400 	.word	0x58020400

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f970 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <FDCAN2_IT0_IRQHandler+0x10>)
 8000832:	f000 ff8b 	bl	800174c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	240000ec 	.word	0x240000ec

08000840 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <FDCAN2_IT1_IRQHandler+0x10>)
 8000846:	f000 ff81 	bl	800174c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240000ec 	.word	0x240000ec

08000854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <_sbrk+0x5c>)
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <_sbrk+0x60>)
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <_sbrk+0x64>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <_sbrk+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	429a      	cmp	r2, r3
 8000882:	d207      	bcs.n	8000894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000884:	f003 fe62 	bl	800454c <__errno>
 8000888:	4603      	mov	r3, r0
 800088a:	220c      	movs	r2, #12
 800088c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	e009      	b.n	80008a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <_sbrk+0x64>)
 80008a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24080000 	.word	0x24080000
 80008b4:	00000400 	.word	0x00000400
 80008b8:	2400018c 	.word	0x2400018c
 80008bc:	240001a8 	.word	0x240001a8

080008c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c4:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <SystemInit+0xe4>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ca:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <SystemInit+0xe4>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <SystemInit+0xe8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d807      	bhi.n	80008f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e0:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <SystemInit+0xe8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f023 030f 	bic.w	r3, r3, #15
 80008e8:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <SystemInit+0xe8>)
 80008ea:	f043 0307 	orr.w	r3, r3, #7
 80008ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <SystemInit+0xec>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <SystemInit+0xec>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <SystemInit+0xec>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <SystemInit+0xec>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4929      	ldr	r1, [pc, #164]	; (80009ac <SystemInit+0xec>)
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemInit+0xf0>)
 800090a:	4013      	ands	r3, r2
 800090c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <SystemInit+0xe8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <SystemInit+0xe8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f023 030f 	bic.w	r3, r3, #15
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemInit+0xe8>)
 8000924:	f043 0307 	orr.w	r3, r3, #7
 8000928:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <SystemInit+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <SystemInit+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <SystemInit+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <SystemInit+0xec>)
 800093e:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <SystemInit+0xf4>)
 8000940:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <SystemInit+0xec>)
 8000944:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <SystemInit+0xf8>)
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <SystemInit+0xec>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <SystemInit+0xfc>)
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <SystemInit+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <SystemInit+0xec>)
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <SystemInit+0xfc>)
 8000958:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <SystemInit+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <SystemInit+0xec>)
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <SystemInit+0xfc>)
 8000964:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <SystemInit+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <SystemInit+0xec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <SystemInit+0xec>)
 8000972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000976:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <SystemInit+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <SystemInit+0x100>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <SystemInit+0x104>)
 8000984:	4013      	ands	r3, r2
 8000986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800098a:	d202      	bcs.n	8000992 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <SystemInit+0x108>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <SystemInit+0x10c>)
 8000994:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	52002000 	.word	0x52002000
 80009ac:	58024400 	.word	0x58024400
 80009b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80009b4:	02020200 	.word	0x02020200
 80009b8:	01ff0000 	.word	0x01ff0000
 80009bc:	01010280 	.word	0x01010280
 80009c0:	5c001000 	.word	0x5c001000
 80009c4:	ffff0000 	.word	0xffff0000
 80009c8:	51008108 	.word	0x51008108
 80009cc:	52004000 	.word	0x52004000

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d4:	f7ff ff74 	bl	80008c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f003 fdab 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fce5 	bl	80003d0 <main>
  bx  lr
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a10:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000a14:	08004f58 	.word	0x08004f58
  ldr r2, =_sbss
 8000a18:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000a1c:	240001a4 	.word	0x240001a4

08000a20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC3_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f000 f98c 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a30:	f002 fb68 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8000a34:	4602      	mov	r2, r0
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_Init+0x68>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	f003 030f 	and.w	r3, r3, #15
 8000a40:	4913      	ldr	r1, [pc, #76]	; (8000a90 <HAL_Init+0x6c>)
 8000a42:	5ccb      	ldrb	r3, [r1, r3]
 8000a44:	f003 031f 	and.w	r3, r3, #31
 8000a48:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_Init+0x68>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_Init+0x6c>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	fa22 f303 	lsr.w	r3, r2, r3
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_Init+0x70>)
 8000a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_Init+0x74>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f814 	bl	8000a9c <HAL_InitTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e002      	b.n	8000a84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7e:	f7ff fe1b 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	08004efc 	.word	0x08004efc
 8000a94:	24000004 	.word	0x24000004
 8000a98:	24000000 	.word	0x24000000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_InitTick+0x60>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e021      	b.n	8000af4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_InitTick+0x64>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_InitTick+0x60>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f971 	bl	8000dae <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f93b 	bl	8000d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x68>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400000c 	.word	0x2400000c
 8000b00:	24000000 	.word	0x24000000
 8000b04:	24000008 	.word	0x24000008

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2400000c 	.word	0x2400000c
 8000b2c:	24000190 	.word	0x24000190

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	24000190 	.word	0x24000190

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2400000c 	.word	0x2400000c

08000b90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetREVID+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	0c1b      	lsrs	r3, r3, #16
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	5c001000 	.word	0x5c001000

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	05fa0000 	.word	0x05fa0000

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff ff8e 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff29 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff40 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff90 	bl	8000c9c <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5f 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff33 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa4 	bl	8000d04 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b098      	sub	sp, #96	; 0x60
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000dd0:	4a84      	ldr	r2, [pc, #528]	; (8000fe4 <HAL_FDCAN_Init+0x21c>)
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	224c      	movs	r2, #76	; 0x4c
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fbe0 	bl	80045a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e1c6      	b.n	8001178 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a7e      	ldr	r2, [pc, #504]	; (8000fe8 <HAL_FDCAN_Init+0x220>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d106      	bne.n	8000e02 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d106      	bne.n	8000e1c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fc68 	bl	80006ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0210 	bic.w	r2, r2, #16
 8000e2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e2c:	f7ff fe80 	bl	8000b30 <HAL_GetTick>
 8000e30:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e32:	e014      	b.n	8000e5e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e34:	f7ff fe7c 	bl	8000b30 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b0a      	cmp	r3, #10
 8000e40:	d90d      	bls.n	8000e5e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2203      	movs	r2, #3
 8000e56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e18c      	b.n	8001178 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d0e3      	beq.n	8000e34 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7c:	f7ff fe58 	bl	8000b30 <HAL_GetTick>
 8000e80:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e82:	e014      	b.n	8000eae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e84:	f7ff fe54 	bl	8000b30 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d90d      	bls.n	8000eae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e164      	b.n	8001178 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0e3      	beq.n	8000e84 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0202 	orr.w	r2, r2, #2
 8000eca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7c1b      	ldrb	r3, [r3, #16]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d108      	bne.n	8000ee6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	e007      	b.n	8000ef6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7c5b      	ldrb	r3, [r3, #17]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d108      	bne.n	8000f10 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	699a      	ldr	r2, [r3, #24]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	e007      	b.n	8000f20 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	699a      	ldr	r2, [r3, #24]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f1e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7c9b      	ldrb	r3, [r3, #18]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d108      	bne.n	8000f3a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699a      	ldr	r2, [r3, #24]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	e007      	b.n	8000f4a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f48:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f6e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0210 	bic.w	r2, r2, #16
 8000f7e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0204 	orr.w	r2, r2, #4
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	e030      	b.n	8000ffc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d02c      	beq.n	8000ffc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d020      	beq.n	8000fec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fb8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0210 	orr.w	r2, r2, #16
 8000fc8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d114      	bne.n	8000ffc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0220 	orr.w	r2, r2, #32
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	e00b      	b.n	8000ffc <HAL_FDCAN_Init+0x234>
 8000fe4:	08004eb0 	.word	0x08004eb0
 8000fe8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	3b01      	subs	r3, #1
 8001002:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	3b01      	subs	r3, #1
 800100a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800100c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001014:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	3b01      	subs	r3, #1
 800101e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001024:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001026:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001030:	d115      	bne.n	800105e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	3b01      	subs	r3, #1
 800103e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001040:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	3b01      	subs	r3, #1
 8001048:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800104a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	3b01      	subs	r3, #1
 8001054:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800105a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800105c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001084:	4413      	add	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d011      	beq.n	80010ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001092:	f023 0107 	bic.w	r1, r3, #7
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	3360      	adds	r3, #96	; 0x60
 800109e:	443b      	add	r3, r7
 80010a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d011      	beq.n	80010da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010be:	f023 0107 	bic.w	r1, r3, #7
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3360      	adds	r3, #96	; 0x60
 80010ca:	443b      	add	r3, r7
 80010cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d012      	beq.n	8001108 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010ea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	3360      	adds	r3, #96	; 0x60
 80010f6:	443b      	add	r3, r7
 80010f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010fc:	011a      	lsls	r2, r3, #4
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110c:	2b00      	cmp	r3, #0
 800110e:	d012      	beq.n	8001136 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001118:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	3360      	adds	r3, #96	; 0x60
 8001124:	443b      	add	r3, r7
 8001126:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800112a:	021a      	lsls	r2, r3, #8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_FDCAN_Init+0x3b8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d107      	bne.n	8001150 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f022 0203 	bic.w	r2, r2, #3
 800114e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fdf9 	bl	8001d60 <FDCAN_CalcultateRamBlockAddresses>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001174:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001178:	4618      	mov	r0, r3
 800117a:	3760      	adds	r7, #96	; 0x60
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	4000a000 	.word	0x4000a000

08001184 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001194:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d002      	beq.n	80011a2 <HAL_FDCAN_ConfigFilter+0x1e>
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d157      	bne.n	8001252 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d12b      	bne.n	8001202 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d10d      	bne.n	80011ce <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80011be:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80011c4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80011c6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00e      	b.n	80011ec <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011da:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80011e2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011e8:	4313      	orrs	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e025      	b.n	800124e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	075a      	lsls	r2, r3, #29
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b07      	cmp	r3, #7
 8001216:	d103      	bne.n	8001220 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	e006      	b.n	800122e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	079a      	lsls	r2, r3, #30
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3304      	adds	r3, #4
 8001246:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e008      	b.n	8001264 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001258:	f043 0202 	orr.w	r2, r3, #2
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
  }
}
 8001264:	4618      	mov	r0, r3
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d111      	bne.n	80012a8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e008      	b.n	80012ba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012ae:	f043 0204 	orr.w	r2, r3, #4
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
  }
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d141      	bne.n	8001362 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012e6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d109      	bne.n	8001302 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e038      	b.n	8001374 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800130a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e026      	b.n	8001374 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 fe95 	bl	800206c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2101      	movs	r1, #1
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e008      	b.n	8001374 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001368:	f043 0208 	orr.w	r2, r3, #8
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800137c:	b480      	push	{r7}
 800137e:	b08b      	sub	sp, #44	; 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001394:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001396:	7efb      	ldrb	r3, [r7, #27]
 8001398:	2b02      	cmp	r3, #2
 800139a:	f040 814b 	bne.w	8001634 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b40      	cmp	r3, #64	; 0x40
 80013a2:	d14d      	bne.n	8001440 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ba:	f043 0220 	orr.w	r2, r3, #32
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e13e      	b.n	8001646 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e12c      	b.n	8001646 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013f4:	0e1b      	lsrs	r3, r3, #24
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10b      	bne.n	8001416 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001406:	0fdb      	lsrs	r3, r3, #31
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001410:	d101      	bne.n	8001416 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001412:	2301      	movs	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	4413      	add	r3, r2
 8001428:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	69f9      	ldr	r1, [r7, #28]
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	e069      	b.n	8001514 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b41      	cmp	r3, #65	; 0x41
 8001444:	d14d      	bne.n	80014e2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800144e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800145c:	f043 0220 	orr.w	r2, r3, #32
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0ed      	b.n	8001646 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001480:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0db      	b.n	8001646 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001496:	0e1b      	lsrs	r3, r3, #24
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10b      	bne.n	80014b8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80014a8:	0fdb      	lsrs	r3, r3, #31
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014b2:	d101      	bne.n	80014b8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	69f9      	ldr	r1, [r7, #28]
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
 80014e0:	e018      	b.n	8001514 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d309      	bcc.n	8001500 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014f2:	f043 0220 	orr.w	r2, r3, #32
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0a2      	b.n	8001646 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e005      	b.n	8001544 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3304      	adds	r3, #4
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0e1b      	lsrs	r3, r3, #24
 8001596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0fda      	lsrs	r2, r3, #31
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	3304      	adds	r3, #4
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	e00a      	b.n	80015ce <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	441a      	add	r2, r3
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	440b      	add	r3, r1
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	3301      	adds	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	461a      	mov	r2, r3
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	4293      	cmp	r3, r2
 80015de:	d3eb      	bcc.n	80015b8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	d105      	bne.n	80015f2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80015f0:	e01e      	b.n	8001630 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b41      	cmp	r3, #65	; 0x41
 80015f6:	d105      	bne.n	8001604 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001602:	e015      	b.n	8001630 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b1f      	cmp	r3, #31
 8001608:	d808      	bhi.n	800161c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800161a:	e009      	b.n	8001630 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e008      	b.n	8001646 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800163a:	f043 0208 	orr.w	r2, r3, #8
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
  }
}
 8001646:	4618      	mov	r0, r3
 8001648:	372c      	adds	r7, #44	; 0x2c
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	08004f0c 	.word	0x08004f0c

08001658 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800166a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d002      	beq.n	8001678 <HAL_FDCAN_ActivateNotification+0x20>
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d155      	bne.n	8001724 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	65da      	str	r2, [r3, #92]	; 0x5c
 8001696:	e014      	b.n	80016c2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4013      	ands	r3, r2
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d108      	bne.n	80016ba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0202 	orr.w	r2, r2, #2
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b8:	e003      	b.n	80016c2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2203      	movs	r2, #3
 80016c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	430a      	orrs	r2, r1
 80016dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_FDCAN_ActivateNotification+0xec>)
 8001708:	4013      	ands	r3, r2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	430b      	orrs	r3, r1
 8001710:	6553      	str	r3, [r2, #84]	; 0x54
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	0f9b      	lsrs	r3, r3, #30
 800171a:	490b      	ldr	r1, [pc, #44]	; (8001748 <HAL_FDCAN_ActivateNotification+0xf0>)
 800171c:	4313      	orrs	r3, r2
 800171e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	e008      	b.n	8001736 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	3fcfffff 	.word	0x3fcfffff
 8001748:	4000a800 	.word	0x4000a800

0800174c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b096      	sub	sp, #88	; 0x58
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001754:	4b9a      	ldr	r3, [pc, #616]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	079b      	lsls	r3, r3, #30
 800175a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800175c:	4b98      	ldr	r3, [pc, #608]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	079b      	lsls	r3, r3, #30
 8001762:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001764:	4013      	ands	r3, r2
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001772:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800177c:	4013      	ands	r3, r2
 800177e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001794:	4013      	ands	r3, r2
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017ac:	4013      	ands	r3, r2
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017c4:	4013      	ands	r3, r2
 80017c6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ce:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017dc:	4013      	ands	r3, r2
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80017f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d010      	beq.n	800181e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80017fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001810:	651a      	str	r2, [r3, #80]	; 0x50
 8001812:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fa54 	bl	8001cc6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001820:	0a9b      	lsrs	r3, r3, #10
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01d      	beq.n	8001866 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182c:	0a9b      	lsrs	r3, r3, #10
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d017      	beq.n	8001866 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800184a:	4013      	ands	r3, r2
 800184c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	651a      	str	r2, [r3, #80]	; 0x50
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800185e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fa07 	bl	8001c74 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00d      	beq.n	8001888 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <HAL_FDCAN_IRQHandler+0x278>)
 8001874:	400b      	ands	r3, r1
 8001876:	6513      	str	r3, [r2, #80]	; 0x50
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 800187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187c:	0f9b      	lsrs	r3, r3, #30
 800187e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f9c0 	bl	8001c08 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00d      	beq.n	80018aa <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <HAL_FDCAN_IRQHandler+0x278>)
 8001896:	400b      	ands	r3, r1
 8001898:	6513      	str	r3, [r2, #80]	; 0x50
 800189a:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 800189c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800189e:	0f9b      	lsrs	r3, r3, #30
 80018a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80018a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f9ba 	bl	8001c1e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80018aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00d      	beq.n	80018cc <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018b6:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <HAL_FDCAN_IRQHandler+0x278>)
 80018b8:	400b      	ands	r3, r1
 80018ba:	6513      	str	r3, [r2, #80]	; 0x50
 80018bc:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 80018be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c0:	0f9b      	lsrs	r3, r3, #30
 80018c2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80018c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fd5a 	bl	8000380 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80018cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00d      	beq.n	80018ee <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018d8:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_FDCAN_IRQHandler+0x278>)
 80018da:	400b      	ands	r3, r1
 80018dc:	6513      	str	r3, [r2, #80]	; 0x50
 80018de:	4a38      	ldr	r2, [pc, #224]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 80018e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e2:	0f9b      	lsrs	r3, r3, #30
 80018e4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80018e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f9a3 	bl	8001c34 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80018ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f0:	0adb      	lsrs	r3, r3, #11
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d010      	beq.n	800191c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80018fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fc:	0adb      	lsrs	r3, r3, #11
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190e:	651a      	str	r2, [r3, #80]	; 0x50
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f997 	bl	8001c4a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800191c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191e:	0a5b      	lsrs	r3, r3, #9
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01d      	beq.n	8001964 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192a:	0a5b      	lsrs	r3, r3, #9
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d017      	beq.n	8001964 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001948:	4013      	ands	r3, r2
 800194a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	651a      	str	r2, [r3, #80]	; 0x50
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800195c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f97d 	bl	8001c5e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001966:	0cdb      	lsrs	r3, r3, #19
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	0cdb      	lsrs	r3, r3, #19
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00a      	beq.n	8001992 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001984:	651a      	str	r2, [r3, #80]	; 0x50
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f97c 	bl	8001c8a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b2:	651a      	str	r2, [r3, #80]	; 0x50
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_FDCAN_IRQHandler+0x274>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	e004      	b.n	80019c8 <HAL_FDCAN_IRQHandler+0x27c>
 80019be:	bf00      	nop
 80019c0:	4000a800 	.word	0x4000a800
 80019c4:	3fcfffff 	.word	0x3fcfffff
 80019c8:	f000 f969 	bl	8001c9e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80019d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00a      	beq.n	80019fa <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019ec:	651a      	str	r2, [r3, #80]	; 0x50
 80019ee:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <HAL_FDCAN_IRQHandler+0x4b0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f95c 	bl	8001cb2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80019fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fc:	0c5b      	lsrs	r3, r3, #17
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	0c5b      	lsrs	r3, r3, #17
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00f      	beq.n	8001a32 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a1c:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00d      	beq.n	8001a54 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a40:	400b      	ands	r3, r1
 8001a42:	6513      	str	r3, [r2, #80]	; 0x50
 8001a44:	4a6d      	ldr	r2, [pc, #436]	; (8001bfc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a48:	0f9b      	lsrs	r3, r3, #30
 8001a4a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f94d 	bl	8001cee <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d011      	beq.n	8001a7e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a60:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a62:	400b      	ands	r3, r1
 8001a64:	6513      	str	r3, [r2, #80]	; 0x50
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6a:	0f9b      	lsrs	r3, r3, #30
 8001a6c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a60      	ldr	r2, [pc, #384]	; (8001c04 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	f040 80ac 	bne.w	8001be2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a4 	beq.w	8001be2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aae:	4013      	ands	r3, r2
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ade:	4013      	ands	r3, r2
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001aec:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	4013      	ands	r3, r2
 8001af8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001b04:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8e6 	bl	8001d04 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b44:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8e6 	bl	8001d1a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01a      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d014      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b7c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8d0 	bl	8001d30 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8d1 	bl	8001d48 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f874 	bl	8001cda <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3758      	adds	r7, #88	; 0x58
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	4000a800 	.word	0x4000a800
 8001c00:	3fcfffff 	.word	0x3fcfffff
 8001c04:	4000a000 	.word	0x4000a000

08001c08 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d76:	4ba7      	ldr	r3, [pc, #668]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	0091      	lsls	r1, r2, #2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	430b      	orrs	r3, r1
 8001d84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d90:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001db6:	4b97      	ldr	r3, [pc, #604]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	0091      	lsls	r1, r2, #2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4413      	add	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001df8:	4b86      	ldr	r3, [pc, #536]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	0091      	lsls	r1, r2, #2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e12:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	4413      	add	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e40:	4b74      	ldr	r3, [pc, #464]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	0091      	lsls	r1, r2, #2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e88:	4b62      	ldr	r3, [pc, #392]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	0091      	lsls	r1, r2, #2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	0091      	lsls	r1, r2, #2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ece:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	4413      	add	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	0091      	lsls	r1, r2, #2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f10:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f2c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f34:	061a      	lsls	r2, r3, #24
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f46:	4413      	add	r3, r2
 8001f48:	009a      	lsls	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	441a      	add	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d915      	bls.n	800203c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002010:	e006      	b.n	8002020 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002012:	bf00      	nop
 8002014:	ffff0003 	.word	0xffff0003
 8002018:	10002b00 	.word	0x10002b00
 800201c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e010      	b.n	800205e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e005      	b.n	8002050 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3f3      	bcc.n	8002044 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800208a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002092:	4313      	orrs	r3, r2
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e00a      	b.n	80020ae <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80020a0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80020a6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020ac:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020b8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020be:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020c4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3304      	adds	r3, #4
 80020ee:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3304      	adds	r3, #4
 80020fa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e020      	b.n	8002144 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3303      	adds	r3, #3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3302      	adds	r3, #2
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	440b      	add	r3, r1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800211a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	440b      	add	r3, r1
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002128:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	440a      	add	r2, r1
 8002130:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002132:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	3304      	adds	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3304      	adds	r3, #4
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <FDCAN_CopyMessageToRAM+0xf8>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	461a      	mov	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4293      	cmp	r3, r2
 8002154:	d3d5      	bcc.n	8002102 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	; 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	08004f0c 	.word	0x08004f0c

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002176:	4b89      	ldr	r3, [pc, #548]	; (800239c <HAL_GPIO_Init+0x234>)
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800217a:	e194      	b.n	80024a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8186 	beq.w	80024a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d005      	beq.n	80021ac <HAL_GPIO_Init+0x44>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d130      	bne.n	800220e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e2:	2201      	movs	r2, #1
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0201 	and.w	r2, r3, #1
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b03      	cmp	r3, #3
 8002218:	d017      	beq.n	800224a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d123      	bne.n	800229e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0203 	and.w	r2, r3, #3
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80e0 	beq.w	80024a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x238>)
 80022e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e6:	4a2e      	ldr	r2, [pc, #184]	; (80023a0 <HAL_GPIO_Init+0x238>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_GPIO_Init+0x238>)
 80022f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <HAL_GPIO_Init+0x23c>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_GPIO_Init+0x240>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d052      	beq.n	80023d0 <HAL_GPIO_Init+0x268>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_GPIO_Init+0x244>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_GPIO_Init+0x22e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_GPIO_Init+0x248>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <HAL_GPIO_Init+0x22a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_GPIO_Init+0x24c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d025      	beq.n	800238e <HAL_GPIO_Init+0x226>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_GPIO_Init+0x250>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x222>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_GPIO_Init+0x254>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_GPIO_Init+0x258>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_GPIO_Init+0x25c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x260>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_GPIO_Init+0x264>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x20e>
 8002372:	2309      	movs	r3, #9
 8002374:	e02d      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002376:	230a      	movs	r3, #10
 8002378:	e02b      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800237a:	2308      	movs	r3, #8
 800237c:	e029      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800237e:	2307      	movs	r3, #7
 8002380:	e027      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002382:	2306      	movs	r3, #6
 8002384:	e025      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002386:	2305      	movs	r3, #5
 8002388:	e023      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800238a:	2304      	movs	r3, #4
 800238c:	e021      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800238e:	2303      	movs	r3, #3
 8002390:	e01f      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002392:	2302      	movs	r3, #2
 8002394:	e01d      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002396:	2301      	movs	r3, #1
 8002398:	e01b      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800239a:	bf00      	nop
 800239c:	58000080 	.word	0x58000080
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58000400 	.word	0x58000400
 80023a8:	58020000 	.word	0x58020000
 80023ac:	58020400 	.word	0x58020400
 80023b0:	58020800 	.word	0x58020800
 80023b4:	58020c00 	.word	0x58020c00
 80023b8:	58021000 	.word	0x58021000
 80023bc:	58021400 	.word	0x58021400
 80023c0:	58021800 	.word	0x58021800
 80023c4:	58021c00 	.word	0x58021c00
 80023c8:	58022000 	.word	0x58022000
 80023cc:	58022400 	.word	0x58022400
 80023d0:	2300      	movs	r3, #0
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e2:	4938      	ldr	r1, [pc, #224]	; (80024c4 <HAL_GPIO_Init+0x35c>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f ae63 	bne.w	800217c <HAL_GPIO_Init+0x14>
  }
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	3724      	adds	r7, #36	; 0x24
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	58000400 	.word	0x58000400

080024c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_PWREx_ConfigSupply+0x70>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00a      	beq.n	80024f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_PWREx_ConfigSupply+0x70>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01f      	b.n	800252e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e01d      	b.n	800252e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_PWREx_ConfigSupply+0x70>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	490f      	ldr	r1, [pc, #60]	; (8002538 <HAL_PWREx_ConfigSupply+0x70>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002502:	f7fe fb15 	bl	8000b30 <HAL_GetTick>
 8002506:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002508:	e009      	b.n	800251e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800250a:	f7fe fb11 	bl	8000b30 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002518:	d901      	bls.n	800251e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e007      	b.n	800252e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_PWREx_ConfigSupply+0x70>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d1ee      	bne.n	800250a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	58024800 	.word	0x58024800

0800253c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	f000 bc1d 	b.w	8002d8a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8087 	beq.w	800266c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255e:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002568:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2b10      	cmp	r3, #16
 8002572:	d007      	beq.n	8002584 <HAL_RCC_OscConfig+0x48>
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b18      	cmp	r3, #24
 8002578:	d110      	bne.n	800259c <HAL_RCC_OscConfig+0x60>
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d10b      	bne.n	800259c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d06c      	beq.n	800266a <HAL_RCC_OscConfig+0x12e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d168      	bne.n	800266a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e3f6      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x78>
 80025a6:	4b87      	ldr	r3, [pc, #540]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a86      	ldr	r2, [pc, #536]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e02e      	b.n	8002612 <HAL_RCC_OscConfig+0xd6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x9a>
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e01d      	b.n	8002612 <HAL_RCC_OscConfig+0xd6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0xbe>
 80025e0:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a74      	ldr	r2, [pc, #464]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0xd6>
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800260c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fa89 	bl	8000b30 <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002622:	f7fe fa85 	bl	8000b30 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	; 0x64
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e3aa      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002634:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0xe6>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fa75 	bl	8000b30 <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264a:	f7fe fa71 	bl	8000b30 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	; 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e396      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x10e>
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80cb 	beq.w	8002810 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002682:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002684:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_RCC_OscConfig+0x164>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b18      	cmp	r3, #24
 8002694:	d156      	bne.n	8002744 <HAL_RCC_OscConfig+0x208>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d151      	bne.n	8002744 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x17c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e368      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 0219 	bic.w	r2, r3, #25
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	493f      	ldr	r1, [pc, #252]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ca:	f7fe fa31 	bl	8000b30 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe fa2d 	bl	8000b30 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e352      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e4:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	f7fe fa4e 	bl	8000b90 <HAL_GetREVID>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d817      	bhi.n	800272e <HAL_RCC_OscConfig+0x1f2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x1dc>
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800270e:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002716:	e07b      	b.n	8002810 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	031b      	lsls	r3, r3, #12
 8002726:	4927      	ldr	r1, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272c:	e070      	b.n	8002810 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	4921      	ldr	r1, [pc, #132]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002742:	e065      	b.n	8002810 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d048      	beq.n	80027de <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 0219 	bic.w	r2, r3, #25
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe f9e7 	bl	8000b30 <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe f9e3 	bl	8000b30 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e308      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	f7fe fa04 	bl	8000b90 <HAL_GetREVID>
 8002788:	4603      	mov	r3, r0
 800278a:	f241 0203 	movw	r2, #4099	; 0x1003
 800278e:	4293      	cmp	r3, r2
 8002790:	d81a      	bhi.n	80027c8 <HAL_RCC_OscConfig+0x28c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d108      	bne.n	80027ac <HAL_RCC_OscConfig+0x270>
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	e031      	b.n	8002810 <HAL_RCC_OscConfig+0x2d4>
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	031b      	lsls	r3, r3, #12
 80027ba:	4902      	ldr	r1, [pc, #8]	; (80027c4 <HAL_RCC_OscConfig+0x288>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
 80027c0:	e026      	b.n	8002810 <HAL_RCC_OscConfig+0x2d4>
 80027c2:	bf00      	nop
 80027c4:	58024400 	.word	0x58024400
 80027c8:	4b9a      	ldr	r3, [pc, #616]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	4997      	ldr	r1, [pc, #604]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e018      	b.n	8002810 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b95      	ldr	r3, [pc, #596]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a94      	ldr	r2, [pc, #592]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe f9a1 	bl	8000b30 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe f99d 	bl	8000b30 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e2c2      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002804:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a9 	beq.w	8002970 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281e:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002826:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d007      	beq.n	8002844 <HAL_RCC_OscConfig+0x308>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b18      	cmp	r3, #24
 8002838:	d13a      	bne.n	80028b0 <HAL_RCC_OscConfig+0x374>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d135      	bne.n	80028b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002844:	4b7b      	ldr	r3, [pc, #492]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_OscConfig+0x320>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e296      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800285c:	f7fe f998 	bl	8000b90 <HAL_GetREVID>
 8002860:	4603      	mov	r3, r0
 8002862:	f241 0203 	movw	r2, #4099	; 0x1003
 8002866:	4293      	cmp	r3, r2
 8002868:	d817      	bhi.n	800289a <HAL_RCC_OscConfig+0x35e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	2b20      	cmp	r3, #32
 8002870:	d108      	bne.n	8002884 <HAL_RCC_OscConfig+0x348>
 8002872:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800287a:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800287c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002880:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002882:	e075      	b.n	8002970 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002884:	4b6b      	ldr	r3, [pc, #428]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	4968      	ldr	r1, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002898:	e06a      	b.n	8002970 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	061b      	lsls	r3, r3, #24
 80028a8:	4962      	ldr	r1, [pc, #392]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ae:	e05f      	b.n	8002970 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d042      	beq.n	800293e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028b8:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80028be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe f934 	bl	8000b30 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028cc:	f7fe f930 	bl	8000b30 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e255      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028de:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ea:	f7fe f951 	bl	8000b90 <HAL_GetREVID>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d817      	bhi.n	8002928 <HAL_RCC_OscConfig+0x3ec>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d108      	bne.n	8002912 <HAL_RCC_OscConfig+0x3d6>
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800290e:	6053      	str	r3, [r2, #4]
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0x434>
 8002912:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	069b      	lsls	r3, r3, #26
 8002920:	4944      	ldr	r1, [pc, #272]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e023      	b.n	8002970 <HAL_RCC_OscConfig+0x434>
 8002928:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	493f      	ldr	r1, [pc, #252]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
 800293c:	e018      	b.n	8002970 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe f8f1 	bl	8000b30 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002952:	f7fe f8ed 	bl	8000b30 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e212      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002964:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d036      	beq.n	80029ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d019      	beq.n	80029b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002988:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe f8ce 	bl	8000b30 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe f8ca 	bl	8000b30 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e1ef      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x45c>
 80029b6:	e018      	b.n	80029ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b8:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe f8b4 	bl	8000b30 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029cc:	f7fe f8b0 	bl	8000b30 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1d5      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d039      	beq.n	8002a6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe f891 	bl	8000b30 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a12:	f7fe f88d 	bl	8000b30 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1b2      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4d6>
 8002a30:	e01b      	b.n	8002a6a <HAL_RCC_OscConfig+0x52e>
 8002a32:	bf00      	nop
 8002a34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a38:	4b9b      	ldr	r3, [pc, #620]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a9a      	ldr	r2, [pc, #616]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a44:	f7fe f874 	bl	8000b30 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a4c:	f7fe f870 	bl	8000b30 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e195      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a5e:	4b92      	ldr	r3, [pc, #584]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8081 	beq.w	8002b7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a78:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <HAL_RCC_OscConfig+0x770>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a8b      	ldr	r2, [pc, #556]	; (8002cac <HAL_RCC_OscConfig+0x770>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a84:	f7fe f854 	bl	8000b30 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe f850 	bl	8000b30 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e175      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9e:	4b83      	ldr	r3, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x770>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x584>
 8002ab2:	4b7d      	ldr	r3, [pc, #500]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a7c      	ldr	r2, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	e02d      	b.n	8002b1c <HAL_RCC_OscConfig+0x5e0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5a6>
 8002ac8:	4b77      	ldr	r3, [pc, #476]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a76      	ldr	r2, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a73      	ldr	r2, [pc, #460]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x5e0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x5c8>
 8002aea:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a6b      	ldr	r2, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x5e0>
 8002b04:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a64      	ldr	r2, [pc, #400]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe f804 	bl	8000b30 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe f800 	bl	8000b30 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e123      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b42:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCC_OscConfig+0x5f0>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fd ffee 	bl	8000b30 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fd ffea 	bl	8000b30 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e10d      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8102 	beq.w	8002d88 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b84:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8c:	2b18      	cmp	r3, #24
 8002b8e:	f000 80bd 	beq.w	8002d0c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	f040 809e 	bne.w	8002cd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a41      	ldr	r2, [pc, #260]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fd ffc2 	bl	8000b30 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fd ffbe 	bl	8000b30 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0e3      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bce:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCC_OscConfig+0x774>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4931      	ldr	r1, [pc, #196]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	628b      	str	r3, [r1, #40]	; 0x28
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	3b01      	subs	r3, #1
 8002bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	025b      	lsls	r3, r3, #9
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	3b01      	subs	r3, #1
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c18:	4923      	ldr	r1, [pc, #140]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x778>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c36:	00d2      	lsls	r2, r2, #3
 8002c38:	491b      	ldr	r1, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f023 020c 	bic.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4917      	ldr	r1, [pc, #92]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f023 0202 	bic.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	4912      	ldr	r1, [pc, #72]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fd ff47 	bl	8000b30 <HAL_GetTick>
 8002ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca4:	e011      	b.n	8002cca <HAL_RCC_OscConfig+0x78e>
 8002ca6:	bf00      	nop
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	58024800 	.word	0x58024800
 8002cb0:	fffffc0c 	.word	0xfffffc0c
 8002cb4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fd ff3a 	bl	8000b30 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e05f      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_RCC_OscConfig+0x858>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x77c>
 8002cd6:	e057      	b.n	8002d88 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_RCC_OscConfig+0x858>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2d      	ldr	r2, [pc, #180]	; (8002d94 <HAL_RCC_OscConfig+0x858>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fd ff24 	bl	8000b30 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fd ff20 	bl	8000b30 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e045      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCC_OscConfig+0x858>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x7b0>
 8002d0a:	e03d      	b.n	8002d88 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCC_OscConfig+0x858>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_RCC_OscConfig+0x858>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d031      	beq.n	8002d84 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0203 	and.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d12a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d122      	bne.n	8002d84 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d11a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	0a5b      	lsrs	r3, r3, #9
 8002d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d108      	bne.n	8002d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	0e1b      	lsrs	r3, r3, #24
 8002d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3730      	adds	r7, #48	; 0x30
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	58024400 	.word	0x58024400

08002d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e19c      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b87      	ldr	r3, [pc, #540]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 020f 	bic.w	r2, r3, #15
 8002dc2:	4985      	ldr	r1, [pc, #532]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e184      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d010      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	4b7b      	ldr	r3, [pc, #492]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d908      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df8:	4b78      	ldr	r3, [pc, #480]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	4975      	ldr	r1, [pc, #468]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d010      	beq.n	8002e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	4b70      	ldr	r3, [pc, #448]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d908      	bls.n	8002e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e26:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	496a      	ldr	r1, [pc, #424]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d908      	bls.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	495e      	ldr	r1, [pc, #376]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	4b59      	ldr	r3, [pc, #356]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d908      	bls.n	8002e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e82:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4953      	ldr	r1, [pc, #332]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d908      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f023 020f 	bic.w	r2, r3, #15
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4947      	ldr	r1, [pc, #284]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d055      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4940      	ldr	r1, [pc, #256]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d121      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0f6      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f00:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d115      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0ea      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f18:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0de      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d6      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f023 0207 	bic.w	r2, r3, #7
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4925      	ldr	r1, [pc, #148]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fdf1 	bl	8000b30 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f52:	f7fd fded 	bl	8000b30 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0be      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d1eb      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d208      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	490e      	ldr	r1, [pc, #56]	; (8002fdc <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d214      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 020f 	bic.w	r2, r3, #15
 8002fbe:	4906      	ldr	r1, [pc, #24]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e086      	b.n	80030e6 <HAL_RCC_ClockConfig+0x34e>
 8002fd8:	52002000 	.word	0x52002000
 8002fdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d208      	bcs.n	800300e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ffc:	4b3c      	ldr	r3, [pc, #240]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4939      	ldr	r1, [pc, #228]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 800300a:	4313      	orrs	r3, r2
 800300c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003026:	429a      	cmp	r2, r3
 8003028:	d208      	bcs.n	800303c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	492e      	ldr	r1, [pc, #184]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8003038:	4313      	orrs	r3, r2
 800303a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003054:	429a      	cmp	r2, r3
 8003056:	d208      	bcs.n	800306a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4922      	ldr	r1, [pc, #136]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8003066:	4313      	orrs	r3, r2
 8003068:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003082:	429a      	cmp	r2, r3
 8003084:	d208      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4917      	ldr	r1, [pc, #92]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 8003094:	4313      	orrs	r3, r2
 8003096:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003098:	f000 f834 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	4912      	ldr	r1, [pc, #72]	; (80030f4 <HAL_RCC_ClockConfig+0x35c>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <HAL_RCC_ClockConfig+0x35c>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x360>)
 80030ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x364>)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x368>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fcde 	bl	8000a9c <HAL_InitTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	58024400 	.word	0x58024400
 80030f4:	08004efc 	.word	0x08004efc
 80030f8:	24000004 	.word	0x24000004
 80030fc:	24000000 	.word	0x24000000
 8003100:	24000008 	.word	0x24000008

08003104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310a:	4bb3      	ldr	r3, [pc, #716]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003112:	2b18      	cmp	r3, #24
 8003114:	f200 8155 	bhi.w	80033c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003185 	.word	0x08003185
 8003124:	080033c3 	.word	0x080033c3
 8003128:	080033c3 	.word	0x080033c3
 800312c:	080033c3 	.word	0x080033c3
 8003130:	080033c3 	.word	0x080033c3
 8003134:	080033c3 	.word	0x080033c3
 8003138:	080033c3 	.word	0x080033c3
 800313c:	080033c3 	.word	0x080033c3
 8003140:	080031ab 	.word	0x080031ab
 8003144:	080033c3 	.word	0x080033c3
 8003148:	080033c3 	.word	0x080033c3
 800314c:	080033c3 	.word	0x080033c3
 8003150:	080033c3 	.word	0x080033c3
 8003154:	080033c3 	.word	0x080033c3
 8003158:	080033c3 	.word	0x080033c3
 800315c:	080033c3 	.word	0x080033c3
 8003160:	080031b1 	.word	0x080031b1
 8003164:	080033c3 	.word	0x080033c3
 8003168:	080033c3 	.word	0x080033c3
 800316c:	080033c3 	.word	0x080033c3
 8003170:	080033c3 	.word	0x080033c3
 8003174:	080033c3 	.word	0x080033c3
 8003178:	080033c3 	.word	0x080033c3
 800317c:	080033c3 	.word	0x080033c3
 8003180:	080031b7 	.word	0x080031b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003184:	4b94      	ldr	r3, [pc, #592]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003190:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	4a90      	ldr	r2, [pc, #576]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031a2:	e111      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031a4:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a6:	61bb      	str	r3, [r7, #24]
    break;
 80031a8:	e10e      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031aa:	4b8d      	ldr	r3, [pc, #564]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031ac:	61bb      	str	r3, [r7, #24]
    break;
 80031ae:	e10b      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031b2:	61bb      	str	r3, [r7, #24]
    break;
 80031b4:	e108      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031b6:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031c0:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031cc:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031d6:	4b80      	ldr	r3, [pc, #512]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	08db      	lsrs	r3, r3, #3
 80031dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80e1 	beq.w	80033bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	f000 8083 	beq.w	8003308 <HAL_RCC_GetSysClockFreq+0x204>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b02      	cmp	r3, #2
 8003206:	f200 80a1 	bhi.w	800334c <HAL_RCC_GetSysClockFreq+0x248>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x114>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d056      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003216:	e099      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003218:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d02d      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003224:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	08db      	lsrs	r3, r3, #3
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	4a6b      	ldr	r2, [pc, #428]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003262:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800327e:	e087      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800328e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003292:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c2:	e065      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003306:	e043      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003312:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332a:	ed97 6a02 	vldr	s12, [r7, #8]
 800332e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800333e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800334a:	e021      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003356:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800335a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800337e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800338e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	0a5b      	lsrs	r3, r3, #9
 8003396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339a:	3301      	adds	r3, #1
 800339c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b4:	ee17 3a90 	vmov	r3, s15
 80033b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033ba:	e005      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
    break;
 80033c0:	e002      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033c4:	61bb      	str	r3, [r7, #24]
    break;
 80033c6:	bf00      	nop
  }

  return sysclockfreq;
 80033c8:	69bb      	ldr	r3, [r7, #24]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
 80033dc:	03d09000 	.word	0x03d09000
 80033e0:	003d0900 	.word	0x003d0900
 80033e4:	017d7840 	.word	0x017d7840
 80033e8:	46000000 	.word	0x46000000
 80033ec:	4c742400 	.word	0x4c742400
 80033f0:	4a742400 	.word	0x4a742400
 80033f4:	4bbebc20 	.word	0x4bbebc20

080033f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003404:	2300      	movs	r3, #0
 8003406:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03f      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800341c:	d02a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800341e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003422:	d824      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003428:	d018      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800342a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800342e:	d81e      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003438:	d007      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800343a:	e018      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343c:	4ba3      	ldr	r3, [pc, #652]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	4aa2      	ldr	r2, [pc, #648]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003448:	e015      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 ff17 	bl	8004284 <RCCEx_PLL2_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800345a:	e00c      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3324      	adds	r3, #36	; 0x24
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ffc0 	bl	80043e8 <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800346c:	e003      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
      break;
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800347c:	4b93      	ldr	r3, [pc, #588]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003488:	4990      	ldr	r1, [pc, #576]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	650b      	str	r3, [r1, #80]	; 0x50
 800348e:	e001      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d03d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d826      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034a8:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034c5 	.word	0x080034c5
 80034b4:	080034d3 	.word	0x080034d3
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fd 	.word	0x080034fd
 80034c0:	080034fd 	.word	0x080034fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	4a80      	ldr	r2, [pc, #512]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d0:	e015      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fed3 	bl	8004284 <RCCEx_PLL2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034e2:	e00c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3324      	adds	r3, #36	; 0x24
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 ff7c 	bl	80043e8 <RCCEx_PLL3_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
      break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003504:	4b71      	ldr	r3, [pc, #452]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003508:	f023 0207 	bic.w	r2, r3, #7
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	496e      	ldr	r1, [pc, #440]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	650b      	str	r3, [r1, #80]	; 0x50
 8003516:	e001      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	d042      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003530:	d02b      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d825      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003538:	2bc0      	cmp	r3, #192	; 0xc0
 800353a:	d028      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800353c:	2bc0      	cmp	r3, #192	; 0xc0
 800353e:	d821      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	d016      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d81d      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d007      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003550:	e018      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003552:	4b5e      	ldr	r3, [pc, #376]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	4a5d      	ldr	r2, [pc, #372]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800355e:	e017      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fe8c 	bl	8004284 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003570:	e00e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f000 ff35 	bl	80043e8 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003582:	e005      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
      break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800358e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003596:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	494a      	ldr	r1, [pc, #296]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	650b      	str	r3, [r1, #80]	; 0x50
 80035a8:	e001      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d049      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035c4:	d030      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ca:	d82a      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035d0:	d02c      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035d6:	d824      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035dc:	d018      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e2:	d81e      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80035e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ec:	d007      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035ee:	e018      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	4a35      	ldr	r2, [pc, #212]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035fc:	e017      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fe3d 	bl	8004284 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800360e:	e00e      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3324      	adds	r3, #36	; 0x24
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fee6 	bl	80043e8 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003620:	e005      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
      break;
 8003626:	e002      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800362c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003642:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	658b      	str	r3, [r1, #88]	; 0x58
 8003648:	e001      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04b      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003664:	d030      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366a:	d82a      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800366c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003670:	d02e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003676:	d824      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367c:	d018      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800367e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003682:	d81e      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800368c:	d007      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800368e:	e018      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800369c:	e019      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fded 	bl	8004284 <RCCEx_PLL2_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036ae:	e010      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3324      	adds	r3, #36	; 0x24
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fe96 	bl	80043e8 <RCCEx_PLL3_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c0:	e007      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
      break;
 80036c6:	e004      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80036c8:	bf00      	nop
 80036ca:	e002      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036cc:	58024400 	.word	0x58024400
      break;
 80036d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036d8:	4b99      	ldr	r3, [pc, #612]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036e6:	4996      	ldr	r1, [pc, #600]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	658b      	str	r3, [r1, #88]	; 0x58
 80036ec:	e001      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d032      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	2b30      	cmp	r3, #48	; 0x30
 8003704:	d01c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003706:	2b30      	cmp	r3, #48	; 0x30
 8003708:	d817      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800370a:	2b20      	cmp	r3, #32
 800370c:	d00c      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800370e:	2b20      	cmp	r3, #32
 8003710:	d813      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003716:	2b10      	cmp	r3, #16
 8003718:	d10f      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371a:	4b89      	ldr	r3, [pc, #548]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a88      	ldr	r2, [pc, #544]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003726:	e00e      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fda8 	bl	8004284 <RCCEx_PLL2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003738:	e005      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800374c:	4b7c      	ldr	r3, [pc, #496]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800374e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	4979      	ldr	r1, [pc, #484]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800375a:	4313      	orrs	r3, r2
 800375c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d047      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003778:	d030      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377e:	d82a      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003784:	d02c      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800378a:	d824      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800378c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003790:	d018      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d81e      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	d007      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80037a2:	e018      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b66      	ldr	r3, [pc, #408]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a65      	ldr	r2, [pc, #404]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b0:	e017      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd63 	bl	8004284 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037c2:	e00e      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fe0c 	bl	80043e8 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d4:	e005      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80037e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	4952      	ldr	r1, [pc, #328]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	650b      	str	r3, [r1, #80]	; 0x50
 80037fa:	e001      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d049      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003814:	d02e      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381a:	d828      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800381c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003820:	d02a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003826:	d822      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800382c:	d026      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800382e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003832:	d81c      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003838:	d010      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800383a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800383e:	d816      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d111      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2101      	movs	r1, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fd17 	bl	8004284 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800385a:	e012      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3324      	adds	r3, #36	; 0x24
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fdc0 	bl	80043e8 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800386c:	e009      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
      break;
 8003872:	e006      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003874:	bf00      	nop
 8003876:	e004      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003878:	bf00      	nop
 800387a:	e002      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800387c:	bf00      	nop
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	492a      	ldr	r1, [pc, #168]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003896:	4313      	orrs	r3, r2
 8003898:	650b      	str	r3, [r1, #80]	; 0x50
 800389a:	e001      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d04d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b6:	d02e      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80038b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038bc:	d828      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d02a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d822      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ce:	d026      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80038d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d4:	d81c      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038da:	d010      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d816      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01d      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80038e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ea:	d111      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fcc6 	bl	8004284 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038fc:	e012      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3324      	adds	r3, #36	; 0x24
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fd6f 	bl	80043e8 <RCCEx_PLL3_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
      break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003938:	4901      	ldr	r1, [pc, #4]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800393a:	4313      	orrs	r3, r2
 800393c:	658b      	str	r3, [r1, #88]	; 0x58
 800393e:	e003      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02f      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395c:	d00e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800395e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003962:	d814      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800396c:	d10f      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396e:	4baf      	ldr	r3, [pc, #700]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4aae      	ldr	r2, [pc, #696]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fc7e 	bl	8004284 <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800399c:	4ba3      	ldr	r3, [pc, #652]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a8:	49a0      	ldr	r1, [pc, #640]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	650b      	str	r3, [r1, #80]	; 0x50
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d032      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d81b      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	080039e1 	.word	0x080039e1
 80039d8:	080039ef 	.word	0x080039ef
 80039dc:	08003a07 	.word	0x08003a07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4b92      	ldr	r3, [pc, #584]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a91      	ldr	r2, [pc, #580]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fc45 	bl	8004284 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a0e:	4b87      	ldr	r3, [pc, #540]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4984      	ldr	r1, [pc, #528]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8086 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a34:	4b7e      	ldr	r3, [pc, #504]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7d      	ldr	r2, [pc, #500]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a40:	f7fd f876 	bl	8000b30 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	e009      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fd f872 	bl	8000b30 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d902      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	75fb      	strb	r3, [r7, #23]
        break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5c:	4b74      	ldr	r3, [pc, #464]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ef      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d166      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a6e:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a78:	4053      	eors	r3, r2
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8c:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa4:	4a61      	ldr	r2, [pc, #388]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab4:	d115      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd f83b 	bl	8000b30 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd f837 	bl	8000b30 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d902      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad6:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ed      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d126      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b06:	0919      	lsrs	r1, r3, #4
 8003b08:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	4947      	ldr	r1, [pc, #284]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b14:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4a44      	ldr	r2, [pc, #272]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b1e:	6113      	str	r3, [r2, #16]
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	493f      	ldr	r1, [pc, #252]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	670b      	str	r3, [r1, #112]	; 0x70
 8003b34:	e004      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
 8003b3a:	e001      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8085 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b52:	2b28      	cmp	r3, #40	; 0x28
 8003b54:	d866      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003c39 	.word	0x08003c39
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003c25 	.word	0x08003c25
 8003b6c:	08003c25 	.word	0x08003c25
 8003b70:	08003c25 	.word	0x08003c25
 8003b74:	08003c25 	.word	0x08003c25
 8003b78:	08003c25 	.word	0x08003c25
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003c25 	.word	0x08003c25
 8003b84:	08003c25 	.word	0x08003c25
 8003b88:	08003c25 	.word	0x08003c25
 8003b8c:	08003c25 	.word	0x08003c25
 8003b90:	08003c25 	.word	0x08003c25
 8003b94:	08003c25 	.word	0x08003c25
 8003b98:	08003c25 	.word	0x08003c25
 8003b9c:	08003c13 	.word	0x08003c13
 8003ba0:	08003c25 	.word	0x08003c25
 8003ba4:	08003c25 	.word	0x08003c25
 8003ba8:	08003c25 	.word	0x08003c25
 8003bac:	08003c25 	.word	0x08003c25
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c25 	.word	0x08003c25
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003c39 	.word	0x08003c39
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c25 	.word	0x08003c25
 8003bc8:	08003c25 	.word	0x08003c25
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c39 	.word	0x08003c39
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c39 	.word	0x08003c39
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fb3c 	bl	8004284 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c10:	e013      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3324      	adds	r3, #36	; 0x24
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fbe5 	bl	80043e8 <RCCEx_PLL3_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c22:	e00a      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
      break;
 8003c28:	e007      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c2a:	bf00      	nop
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58024800 	.word	0x58024800
 8003c34:	00ffffcf 	.word	0x00ffffcf
      break;
 8003c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c40:	4b96      	ldr	r3, [pc, #600]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4c:	4993      	ldr	r1, [pc, #588]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	654b      	str	r3, [r1, #84]	; 0x54
 8003c52:	e001      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d038      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d821      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003cb7 	.word	0x08003cb7
 8003c78:	08003c8d 	.word	0x08003c8d
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003cb7 	.word	0x08003cb7
 8003c84:	08003cb7 	.word	0x08003cb7
 8003c88:	08003cb7 	.word	0x08003cb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 faf6 	bl	8004284 <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	; 0x24
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fb9f 	bl	80043e8 <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cae:	e003      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cbe:	4b77      	ldr	r3, [pc, #476]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	4974      	ldr	r1, [pc, #464]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	654b      	str	r3, [r1, #84]	; 0x54
 8003cd0:	e001      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d03a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d821      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d37 	.word	0x08003d37
 8003cf8:	08003d0d 	.word	0x08003d0d
 8003cfc:	08003d1f 	.word	0x08003d1f
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d37 	.word	0x08003d37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fab6 	bl	8004284 <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	; 0x24
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb5f 	bl	80043e8 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	4953      	ldr	r1, [pc, #332]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	658b      	str	r3, [r1, #88]	; 0x58
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6e:	d02e      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d74:	d828      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7a:	d02a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d822      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d86:	d026      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d8c:	d81c      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d92:	d010      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d98:	d816      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa6a 	bl	8004284 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003db4:	e012      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fb13 	bl	80043e8 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e009      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e004      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df0:	492a      	ldr	r1, [pc, #168]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	654b      	str	r3, [r1, #84]	; 0x54
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04d      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e12:	d02e      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e18:	d828      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	d02a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d822      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2a:	d026      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e30:	d81c      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3c:	d816      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01d      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d111      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fa18 	bl	8004284 <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e58:	e012      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fac1 	bl	80043e8 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e6a:	e009      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e94:	4901      	ldr	r1, [pc, #4]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	658b      	str	r3, [r1, #88]	; 0x58
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d04b      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eba:	d02e      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ebc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ec0:	d828      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec6:	d02a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ecc:	d822      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ece:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ed2:	d026      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003ed4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ed8:	d81c      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ede:	d010      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee4:	d816      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	d111      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9c4 	bl	8004284 <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f00:	e012      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3324      	adds	r3, #36	; 0x24
 8003f06:	2102      	movs	r1, #2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa6d 	bl	80043e8 <RCCEx_PLL3_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f12:	e009      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
      break;
 8003f18:	e006      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e004      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f2e:	4b9d      	ldr	r3, [pc, #628]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3c:	4999      	ldr	r1, [pc, #612]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	658b      	str	r3, [r1, #88]	; 0x58
 8003f42:	e001      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	d10a      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa3e 	bl	80043e8 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f76:	4b8b      	ldr	r3, [pc, #556]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f84:	4987      	ldr	r1, [pc, #540]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fa1d 	bl	80043e8 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb8:	4b7a      	ldr	r3, [pc, #488]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc6:	4977      	ldr	r1, [pc, #476]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d034      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe2:	d01d      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe8:	d817      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d009      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003ff4:	e011      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f941 	bl	8004284 <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3324      	adds	r3, #36	; 0x24
 800400c:	2102      	movs	r1, #2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f9ea 	bl	80043e8 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
      break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004028:	4b5e      	ldr	r3, [pc, #376]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004036:	495b      	ldr	r1, [pc, #364]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004038:	4313      	orrs	r3, r2
 800403a:	658b      	str	r3, [r1, #88]	; 0x58
 800403c:	e001      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d033      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004058:	d01c      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800405a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800405e:	d816      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004064:	d003      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800406a:	d007      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800406c:	e00f      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406e:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	4a4c      	ldr	r2, [pc, #304]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800407a:	e00c      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f9b0 	bl	80043e8 <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
      break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409c:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040aa:	493e      	ldr	r1, [pc, #248]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	654b      	str	r3, [r1, #84]	; 0x54
 80040b0:	e001      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d029      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d007      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80040d0:	e00f      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d2:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040de:	e00b      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f8cc 	bl	8004284 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
      break;
 80040f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040fe:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	4926      	ldr	r1, [pc, #152]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800410c:	4313      	orrs	r3, r2
 800410e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f95d 	bl	80043e8 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d033      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d017      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800414e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004152:	d811      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d013      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d80b      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004176:	e007      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
      break;
 800417c:	e004      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10c      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	4902      	ldr	r1, [pc, #8]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800419c:	4313      	orrs	r3, r2
 800419e:	654b      	str	r3, [r1, #84]	; 0x54
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	492e      	ldr	r1, [pc, #184]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041e4:	4926      	ldr	r1, [pc, #152]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004202:	491f      	ldr	r1, [pc, #124]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004204:	4313      	orrs	r3, r2
 8004206:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800421a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800421e:	6113      	str	r3, [r2, #16]
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800422a:	4915      	ldr	r1, [pc, #84]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da08      	bge.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004246:	4313      	orrs	r3, r2
 8004248:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	4906      	ldr	r1, [pc, #24]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004266:	4313      	orrs	r3, r2
 8004268:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800426a:	7dbb      	ldrb	r3, [r7, #22]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400

08004284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004292:	4b53      	ldr	r3, [pc, #332]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b03      	cmp	r3, #3
 800429c:	d101      	bne.n	80042a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e099      	b.n	80043d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042a2:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ae:	f7fc fc3f 	bl	8000b30 <HAL_GetTick>
 80042b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042b6:	f7fc fc3b 	bl	8000b30 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e086      	b.n	80043d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	493f      	ldr	r1, [pc, #252]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	628b      	str	r3, [r1, #40]	; 0x28
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	025b      	lsls	r3, r3, #9
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	3b01      	subs	r3, #1
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	3b01      	subs	r3, #1
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004318:	4931      	ldr	r1, [pc, #196]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	492d      	ldr	r1, [pc, #180]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f023 0220 	bic.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	4928      	ldr	r1, [pc, #160]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004342:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004348:	f023 0310 	bic.w	r3, r3, #16
 800434c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <RCCEx_PLL2_Config+0x160>)
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	69d2      	ldr	r2, [r2, #28]
 800435a:	00d2      	lsls	r2, r2, #3
 800435c:	4920      	ldr	r1, [pc, #128]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004368:	f043 0310 	orr.w	r3, r3, #16
 800436c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800437a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800437e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004380:	e00f      	b.n	80043a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800438e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004394:	e005      	b.n	80043a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 800439c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0e      	ldr	r2, [pc, #56]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80043a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fc fbbf 	bl	8000b30 <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043b4:	e008      	b.n	80043c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043b6:	f7fc fbbb 	bl	8000b30 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e006      	b.n	80043d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <RCCEx_PLL2_Config+0x15c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400
 80043e4:	ffff0007 	.word	0xffff0007

080043e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d101      	bne.n	8004406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e099      	b.n	800453a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004412:	f7fc fb8d 	bl	8000b30 <HAL_GetTick>
 8004416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004418:	e008      	b.n	800442c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800441a:	f7fc fb89 	bl	8000b30 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e086      	b.n	800453a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	051b      	lsls	r3, r3, #20
 8004446:	493f      	ldr	r1, [pc, #252]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	628b      	str	r3, [r1, #40]	; 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	3b01      	subs	r3, #1
 8004452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	3b01      	subs	r3, #1
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	b29b      	uxth	r3, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800447c:	4931      	ldr	r1, [pc, #196]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004482:	4b30      	ldr	r3, [pc, #192]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	492d      	ldr	r1, [pc, #180]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004494:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	4928      	ldr	r1, [pc, #160]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <RCCEx_PLL3_Config+0x160>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69d2      	ldr	r2, [r2, #28]
 80044be:	00d2      	lsls	r2, r2, #3
 80044c0:	4920      	ldr	r1, [pc, #128]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044e4:	e00f      	b.n	8004506 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f8:	e005      	b.n	8004506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004512:	f7fc fb0d 	bl	8000b30 <HAL_GetTick>
 8004516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004518:	e008      	b.n	800452c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800451a:	f7fc fb09 	bl	8000b30 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e006      	b.n	800453a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <RCCEx_PLL3_Config+0x15c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	ffff0007 	.word	0xffff0007

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	24000010 	.word	0x24000010

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4d0d      	ldr	r5, [pc, #52]	; (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	; (8004594 <__libc_init_array+0x3c>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2600      	movs	r6, #0
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4d0b      	ldr	r5, [pc, #44]	; (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	; (800459c <__libc_init_array+0x44>)
 800456c:	f000 fc8e 	bl	8004e8c <_init>
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2600      	movs	r6, #0
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f855 3b04 	ldr.w	r3, [r5], #4
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08004f50 	.word	0x08004f50
 8004594:	08004f50 	.word	0x08004f50
 8004598:	08004f50 	.word	0x08004f50
 800459c:	08004f54 	.word	0x08004f54

080045a0 <memcpy>:
 80045a0:	440a      	add	r2, r1
 80045a2:	4291      	cmp	r1, r2
 80045a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a8:	d100      	bne.n	80045ac <memcpy+0xc>
 80045aa:	4770      	bx	lr
 80045ac:	b510      	push	{r4, lr}
 80045ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b6:	4291      	cmp	r1, r2
 80045b8:	d1f9      	bne.n	80045ae <memcpy+0xe>
 80045ba:	bd10      	pop	{r4, pc}

080045bc <memset>:
 80045bc:	4402      	add	r2, r0
 80045be:	4603      	mov	r3, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <siprintf>:
 80045cc:	b40e      	push	{r1, r2, r3}
 80045ce:	b500      	push	{lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	ab1d      	add	r3, sp, #116	; 0x74
 80045d4:	9002      	str	r0, [sp, #8]
 80045d6:	9006      	str	r0, [sp, #24]
 80045d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045dc:	4809      	ldr	r0, [pc, #36]	; (8004604 <siprintf+0x38>)
 80045de:	9107      	str	r1, [sp, #28]
 80045e0:	9104      	str	r1, [sp, #16]
 80045e2:	4909      	ldr	r1, [pc, #36]	; (8004608 <siprintf+0x3c>)
 80045e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	a902      	add	r1, sp, #8
 80045f0:	f000 f868 	bl	80046c4 <_svfiprintf_r>
 80045f4:	9b02      	ldr	r3, [sp, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	b01c      	add	sp, #112	; 0x70
 80045fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004600:	b003      	add	sp, #12
 8004602:	4770      	bx	lr
 8004604:	24000010 	.word	0x24000010
 8004608:	ffff0208 	.word	0xffff0208

0800460c <__ssputs_r>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	688e      	ldr	r6, [r1, #8]
 8004612:	429e      	cmp	r6, r3
 8004614:	4682      	mov	sl, r0
 8004616:	460c      	mov	r4, r1
 8004618:	4690      	mov	r8, r2
 800461a:	461f      	mov	r7, r3
 800461c:	d838      	bhi.n	8004690 <__ssputs_r+0x84>
 800461e:	898a      	ldrh	r2, [r1, #12]
 8004620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004624:	d032      	beq.n	800468c <__ssputs_r+0x80>
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	6909      	ldr	r1, [r1, #16]
 800462a:	eba5 0901 	sub.w	r9, r5, r1
 800462e:	6965      	ldr	r5, [r4, #20]
 8004630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004638:	3301      	adds	r3, #1
 800463a:	444b      	add	r3, r9
 800463c:	106d      	asrs	r5, r5, #1
 800463e:	429d      	cmp	r5, r3
 8004640:	bf38      	it	cc
 8004642:	461d      	movcc	r5, r3
 8004644:	0553      	lsls	r3, r2, #21
 8004646:	d531      	bpl.n	80046ac <__ssputs_r+0xa0>
 8004648:	4629      	mov	r1, r5
 800464a:	f000 fb55 	bl	8004cf8 <_malloc_r>
 800464e:	4606      	mov	r6, r0
 8004650:	b950      	cbnz	r0, 8004668 <__ssputs_r+0x5c>
 8004652:	230c      	movs	r3, #12
 8004654:	f8ca 3000 	str.w	r3, [sl]
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	6921      	ldr	r1, [r4, #16]
 800466a:	464a      	mov	r2, r9
 800466c:	f7ff ff98 	bl	80045a0 <memcpy>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	6126      	str	r6, [r4, #16]
 800467e:	6165      	str	r5, [r4, #20]
 8004680:	444e      	add	r6, r9
 8004682:	eba5 0509 	sub.w	r5, r5, r9
 8004686:	6026      	str	r6, [r4, #0]
 8004688:	60a5      	str	r5, [r4, #8]
 800468a:	463e      	mov	r6, r7
 800468c:	42be      	cmp	r6, r7
 800468e:	d900      	bls.n	8004692 <__ssputs_r+0x86>
 8004690:	463e      	mov	r6, r7
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	4632      	mov	r2, r6
 8004696:	4641      	mov	r1, r8
 8004698:	f000 faa8 	bl	8004bec <memmove>
 800469c:	68a3      	ldr	r3, [r4, #8]
 800469e:	1b9b      	subs	r3, r3, r6
 80046a0:	60a3      	str	r3, [r4, #8]
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	4433      	add	r3, r6
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	2000      	movs	r0, #0
 80046aa:	e7db      	b.n	8004664 <__ssputs_r+0x58>
 80046ac:	462a      	mov	r2, r5
 80046ae:	f000 fb97 	bl	8004de0 <_realloc_r>
 80046b2:	4606      	mov	r6, r0
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d1e1      	bne.n	800467c <__ssputs_r+0x70>
 80046b8:	6921      	ldr	r1, [r4, #16]
 80046ba:	4650      	mov	r0, sl
 80046bc:	f000 fab0 	bl	8004c20 <_free_r>
 80046c0:	e7c7      	b.n	8004652 <__ssputs_r+0x46>
	...

080046c4 <_svfiprintf_r>:
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	4698      	mov	r8, r3
 80046ca:	898b      	ldrh	r3, [r1, #12]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	b09d      	sub	sp, #116	; 0x74
 80046d0:	4607      	mov	r7, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	d50e      	bpl.n	80046f6 <_svfiprintf_r+0x32>
 80046d8:	690b      	ldr	r3, [r1, #16]
 80046da:	b963      	cbnz	r3, 80046f6 <_svfiprintf_r+0x32>
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	f000 fb0b 	bl	8004cf8 <_malloc_r>
 80046e2:	6028      	str	r0, [r5, #0]
 80046e4:	6128      	str	r0, [r5, #16]
 80046e6:	b920      	cbnz	r0, 80046f2 <_svfiprintf_r+0x2e>
 80046e8:	230c      	movs	r3, #12
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	e0d1      	b.n	8004896 <_svfiprintf_r+0x1d2>
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	616b      	str	r3, [r5, #20]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9309      	str	r3, [sp, #36]	; 0x24
 80046fa:	2320      	movs	r3, #32
 80046fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004700:	f8cd 800c 	str.w	r8, [sp, #12]
 8004704:	2330      	movs	r3, #48	; 0x30
 8004706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048b0 <_svfiprintf_r+0x1ec>
 800470a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800470e:	f04f 0901 	mov.w	r9, #1
 8004712:	4623      	mov	r3, r4
 8004714:	469a      	mov	sl, r3
 8004716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800471a:	b10a      	cbz	r2, 8004720 <_svfiprintf_r+0x5c>
 800471c:	2a25      	cmp	r2, #37	; 0x25
 800471e:	d1f9      	bne.n	8004714 <_svfiprintf_r+0x50>
 8004720:	ebba 0b04 	subs.w	fp, sl, r4
 8004724:	d00b      	beq.n	800473e <_svfiprintf_r+0x7a>
 8004726:	465b      	mov	r3, fp
 8004728:	4622      	mov	r2, r4
 800472a:	4629      	mov	r1, r5
 800472c:	4638      	mov	r0, r7
 800472e:	f7ff ff6d 	bl	800460c <__ssputs_r>
 8004732:	3001      	adds	r0, #1
 8004734:	f000 80aa 	beq.w	800488c <_svfiprintf_r+0x1c8>
 8004738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800473a:	445a      	add	r2, fp
 800473c:	9209      	str	r2, [sp, #36]	; 0x24
 800473e:	f89a 3000 	ldrb.w	r3, [sl]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a2 	beq.w	800488c <_svfiprintf_r+0x1c8>
 8004748:	2300      	movs	r3, #0
 800474a:	f04f 32ff 	mov.w	r2, #4294967295
 800474e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004752:	f10a 0a01 	add.w	sl, sl, #1
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	9307      	str	r3, [sp, #28]
 800475a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800475e:	931a      	str	r3, [sp, #104]	; 0x68
 8004760:	4654      	mov	r4, sl
 8004762:	2205      	movs	r2, #5
 8004764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004768:	4851      	ldr	r0, [pc, #324]	; (80048b0 <_svfiprintf_r+0x1ec>)
 800476a:	f7fb fdb9 	bl	80002e0 <memchr>
 800476e:	9a04      	ldr	r2, [sp, #16]
 8004770:	b9d8      	cbnz	r0, 80047aa <_svfiprintf_r+0xe6>
 8004772:	06d0      	lsls	r0, r2, #27
 8004774:	bf44      	itt	mi
 8004776:	2320      	movmi	r3, #32
 8004778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477c:	0711      	lsls	r1, r2, #28
 800477e:	bf44      	itt	mi
 8004780:	232b      	movmi	r3, #43	; 0x2b
 8004782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004786:	f89a 3000 	ldrb.w	r3, [sl]
 800478a:	2b2a      	cmp	r3, #42	; 0x2a
 800478c:	d015      	beq.n	80047ba <_svfiprintf_r+0xf6>
 800478e:	9a07      	ldr	r2, [sp, #28]
 8004790:	4654      	mov	r4, sl
 8004792:	2000      	movs	r0, #0
 8004794:	f04f 0c0a 	mov.w	ip, #10
 8004798:	4621      	mov	r1, r4
 800479a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479e:	3b30      	subs	r3, #48	; 0x30
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	d94e      	bls.n	8004842 <_svfiprintf_r+0x17e>
 80047a4:	b1b0      	cbz	r0, 80047d4 <_svfiprintf_r+0x110>
 80047a6:	9207      	str	r2, [sp, #28]
 80047a8:	e014      	b.n	80047d4 <_svfiprintf_r+0x110>
 80047aa:	eba0 0308 	sub.w	r3, r0, r8
 80047ae:	fa09 f303 	lsl.w	r3, r9, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	46a2      	mov	sl, r4
 80047b8:	e7d2      	b.n	8004760 <_svfiprintf_r+0x9c>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	1d19      	adds	r1, r3, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	9103      	str	r1, [sp, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfbb      	ittet	lt
 80047c6:	425b      	neglt	r3, r3
 80047c8:	f042 0202 	orrlt.w	r2, r2, #2
 80047cc:	9307      	strge	r3, [sp, #28]
 80047ce:	9307      	strlt	r3, [sp, #28]
 80047d0:	bfb8      	it	lt
 80047d2:	9204      	strlt	r2, [sp, #16]
 80047d4:	7823      	ldrb	r3, [r4, #0]
 80047d6:	2b2e      	cmp	r3, #46	; 0x2e
 80047d8:	d10c      	bne.n	80047f4 <_svfiprintf_r+0x130>
 80047da:	7863      	ldrb	r3, [r4, #1]
 80047dc:	2b2a      	cmp	r3, #42	; 0x2a
 80047de:	d135      	bne.n	800484c <_svfiprintf_r+0x188>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9203      	str	r2, [sp, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfb8      	it	lt
 80047ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f0:	3402      	adds	r4, #2
 80047f2:	9305      	str	r3, [sp, #20]
 80047f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048c0 <_svfiprintf_r+0x1fc>
 80047f8:	7821      	ldrb	r1, [r4, #0]
 80047fa:	2203      	movs	r2, #3
 80047fc:	4650      	mov	r0, sl
 80047fe:	f7fb fd6f 	bl	80002e0 <memchr>
 8004802:	b140      	cbz	r0, 8004816 <_svfiprintf_r+0x152>
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	eba0 000a 	sub.w	r0, r0, sl
 800480a:	fa03 f000 	lsl.w	r0, r3, r0
 800480e:	9b04      	ldr	r3, [sp, #16]
 8004810:	4303      	orrs	r3, r0
 8004812:	3401      	adds	r4, #1
 8004814:	9304      	str	r3, [sp, #16]
 8004816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481a:	4826      	ldr	r0, [pc, #152]	; (80048b4 <_svfiprintf_r+0x1f0>)
 800481c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004820:	2206      	movs	r2, #6
 8004822:	f7fb fd5d 	bl	80002e0 <memchr>
 8004826:	2800      	cmp	r0, #0
 8004828:	d038      	beq.n	800489c <_svfiprintf_r+0x1d8>
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <_svfiprintf_r+0x1f4>)
 800482c:	bb1b      	cbnz	r3, 8004876 <_svfiprintf_r+0x1b2>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	3307      	adds	r3, #7
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	3308      	adds	r3, #8
 8004838:	9303      	str	r3, [sp, #12]
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	4433      	add	r3, r6
 800483e:	9309      	str	r3, [sp, #36]	; 0x24
 8004840:	e767      	b.n	8004712 <_svfiprintf_r+0x4e>
 8004842:	fb0c 3202 	mla	r2, ip, r2, r3
 8004846:	460c      	mov	r4, r1
 8004848:	2001      	movs	r0, #1
 800484a:	e7a5      	b.n	8004798 <_svfiprintf_r+0xd4>
 800484c:	2300      	movs	r3, #0
 800484e:	3401      	adds	r4, #1
 8004850:	9305      	str	r3, [sp, #20]
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 0c0a 	mov.w	ip, #10
 8004858:	4620      	mov	r0, r4
 800485a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485e:	3a30      	subs	r2, #48	; 0x30
 8004860:	2a09      	cmp	r2, #9
 8004862:	d903      	bls.n	800486c <_svfiprintf_r+0x1a8>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0c5      	beq.n	80047f4 <_svfiprintf_r+0x130>
 8004868:	9105      	str	r1, [sp, #20]
 800486a:	e7c3      	b.n	80047f4 <_svfiprintf_r+0x130>
 800486c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004870:	4604      	mov	r4, r0
 8004872:	2301      	movs	r3, #1
 8004874:	e7f0      	b.n	8004858 <_svfiprintf_r+0x194>
 8004876:	ab03      	add	r3, sp, #12
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	462a      	mov	r2, r5
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <_svfiprintf_r+0x1f8>)
 800487e:	a904      	add	r1, sp, #16
 8004880:	4638      	mov	r0, r7
 8004882:	f3af 8000 	nop.w
 8004886:	1c42      	adds	r2, r0, #1
 8004888:	4606      	mov	r6, r0
 800488a:	d1d6      	bne.n	800483a <_svfiprintf_r+0x176>
 800488c:	89ab      	ldrh	r3, [r5, #12]
 800488e:	065b      	lsls	r3, r3, #25
 8004890:	f53f af2c 	bmi.w	80046ec <_svfiprintf_r+0x28>
 8004894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004896:	b01d      	add	sp, #116	; 0x74
 8004898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489c:	ab03      	add	r3, sp, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	462a      	mov	r2, r5
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <_svfiprintf_r+0x1f8>)
 80048a4:	a904      	add	r1, sp, #16
 80048a6:	4638      	mov	r0, r7
 80048a8:	f000 f87a 	bl	80049a0 <_printf_i>
 80048ac:	e7eb      	b.n	8004886 <_svfiprintf_r+0x1c2>
 80048ae:	bf00      	nop
 80048b0:	08004f1c 	.word	0x08004f1c
 80048b4:	08004f26 	.word	0x08004f26
 80048b8:	00000000 	.word	0x00000000
 80048bc:	0800460d 	.word	0x0800460d
 80048c0:	08004f22 	.word	0x08004f22

080048c4 <_printf_common>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	4616      	mov	r6, r2
 80048ca:	4699      	mov	r9, r3
 80048cc:	688a      	ldr	r2, [r1, #8]
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bfb8      	it	lt
 80048d8:	4613      	movlt	r3, r2
 80048da:	6033      	str	r3, [r6, #0]
 80048dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e0:	4607      	mov	r7, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	b10a      	cbz	r2, 80048ea <_printf_common+0x26>
 80048e6:	3301      	adds	r3, #1
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	0699      	lsls	r1, r3, #26
 80048ee:	bf42      	ittt	mi
 80048f0:	6833      	ldrmi	r3, [r6, #0]
 80048f2:	3302      	addmi	r3, #2
 80048f4:	6033      	strmi	r3, [r6, #0]
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	f015 0506 	ands.w	r5, r5, #6
 80048fc:	d106      	bne.n	800490c <_printf_common+0x48>
 80048fe:	f104 0a19 	add.w	sl, r4, #25
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	6832      	ldr	r2, [r6, #0]
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	42ab      	cmp	r3, r5
 800490a:	dc26      	bgt.n	800495a <_printf_common+0x96>
 800490c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004910:	1e13      	subs	r3, r2, #0
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	bf18      	it	ne
 8004916:	2301      	movne	r3, #1
 8004918:	0692      	lsls	r2, r2, #26
 800491a:	d42b      	bmi.n	8004974 <_printf_common+0xb0>
 800491c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004920:	4649      	mov	r1, r9
 8004922:	4638      	mov	r0, r7
 8004924:	47c0      	blx	r8
 8004926:	3001      	adds	r0, #1
 8004928:	d01e      	beq.n	8004968 <_printf_common+0xa4>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	68e5      	ldr	r5, [r4, #12]
 800492e:	6832      	ldr	r2, [r6, #0]
 8004930:	f003 0306 	and.w	r3, r3, #6
 8004934:	2b04      	cmp	r3, #4
 8004936:	bf08      	it	eq
 8004938:	1aad      	subeq	r5, r5, r2
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	bf0c      	ite	eq
 8004940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004944:	2500      	movne	r5, #0
 8004946:	4293      	cmp	r3, r2
 8004948:	bfc4      	itt	gt
 800494a:	1a9b      	subgt	r3, r3, r2
 800494c:	18ed      	addgt	r5, r5, r3
 800494e:	2600      	movs	r6, #0
 8004950:	341a      	adds	r4, #26
 8004952:	42b5      	cmp	r5, r6
 8004954:	d11a      	bne.n	800498c <_printf_common+0xc8>
 8004956:	2000      	movs	r0, #0
 8004958:	e008      	b.n	800496c <_printf_common+0xa8>
 800495a:	2301      	movs	r3, #1
 800495c:	4652      	mov	r2, sl
 800495e:	4649      	mov	r1, r9
 8004960:	4638      	mov	r0, r7
 8004962:	47c0      	blx	r8
 8004964:	3001      	adds	r0, #1
 8004966:	d103      	bne.n	8004970 <_printf_common+0xac>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004970:	3501      	adds	r5, #1
 8004972:	e7c6      	b.n	8004902 <_printf_common+0x3e>
 8004974:	18e1      	adds	r1, r4, r3
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	2030      	movs	r0, #48	; 0x30
 800497a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800497e:	4422      	add	r2, r4
 8004980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004988:	3302      	adds	r3, #2
 800498a:	e7c7      	b.n	800491c <_printf_common+0x58>
 800498c:	2301      	movs	r3, #1
 800498e:	4622      	mov	r2, r4
 8004990:	4649      	mov	r1, r9
 8004992:	4638      	mov	r0, r7
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d0e6      	beq.n	8004968 <_printf_common+0xa4>
 800499a:	3601      	adds	r6, #1
 800499c:	e7d9      	b.n	8004952 <_printf_common+0x8e>
	...

080049a0 <_printf_i>:
 80049a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	7e0f      	ldrb	r7, [r1, #24]
 80049a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049a8:	2f78      	cmp	r7, #120	; 0x78
 80049aa:	4691      	mov	r9, r2
 80049ac:	4680      	mov	r8, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	469a      	mov	sl, r3
 80049b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049b6:	d807      	bhi.n	80049c8 <_printf_i+0x28>
 80049b8:	2f62      	cmp	r7, #98	; 0x62
 80049ba:	d80a      	bhi.n	80049d2 <_printf_i+0x32>
 80049bc:	2f00      	cmp	r7, #0
 80049be:	f000 80d8 	beq.w	8004b72 <_printf_i+0x1d2>
 80049c2:	2f58      	cmp	r7, #88	; 0x58
 80049c4:	f000 80a3 	beq.w	8004b0e <_printf_i+0x16e>
 80049c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d0:	e03a      	b.n	8004a48 <_printf_i+0xa8>
 80049d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049d6:	2b15      	cmp	r3, #21
 80049d8:	d8f6      	bhi.n	80049c8 <_printf_i+0x28>
 80049da:	a101      	add	r1, pc, #4	; (adr r1, 80049e0 <_printf_i+0x40>)
 80049dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a4d 	.word	0x08004a4d
 80049e8:	080049c9 	.word	0x080049c9
 80049ec:	080049c9 	.word	0x080049c9
 80049f0:	080049c9 	.word	0x080049c9
 80049f4:	080049c9 	.word	0x080049c9
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	080049c9 	.word	0x080049c9
 8004a00:	080049c9 	.word	0x080049c9
 8004a04:	080049c9 	.word	0x080049c9
 8004a08:	080049c9 	.word	0x080049c9
 8004a0c:	08004b59 	.word	0x08004b59
 8004a10:	08004a7d 	.word	0x08004a7d
 8004a14:	08004b3b 	.word	0x08004b3b
 8004a18:	080049c9 	.word	0x080049c9
 8004a1c:	080049c9 	.word	0x080049c9
 8004a20:	08004b7b 	.word	0x08004b7b
 8004a24:	080049c9 	.word	0x080049c9
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	080049c9 	.word	0x080049c9
 8004a30:	080049c9 	.word	0x080049c9
 8004a34:	08004b43 	.word	0x08004b43
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	602a      	str	r2, [r5, #0]
 8004a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0a3      	b.n	8004b94 <_printf_i+0x1f4>
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	0606      	lsls	r6, r0, #24
 8004a52:	f101 0304 	add.w	r3, r1, #4
 8004a56:	d50a      	bpl.n	8004a6e <_printf_i+0xce>
 8004a58:	680e      	ldr	r6, [r1, #0]
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	2e00      	cmp	r6, #0
 8004a5e:	da03      	bge.n	8004a68 <_printf_i+0xc8>
 8004a60:	232d      	movs	r3, #45	; 0x2d
 8004a62:	4276      	negs	r6, r6
 8004a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a68:	485e      	ldr	r0, [pc, #376]	; (8004be4 <_printf_i+0x244>)
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	e019      	b.n	8004aa2 <_printf_i+0x102>
 8004a6e:	680e      	ldr	r6, [r1, #0]
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a76:	bf18      	it	ne
 8004a78:	b236      	sxthne	r6, r6
 8004a7a:	e7ef      	b.n	8004a5c <_printf_i+0xbc>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	1d19      	adds	r1, r3, #4
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	0601      	lsls	r1, r0, #24
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0xec>
 8004a88:	681e      	ldr	r6, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0xf2>
 8004a8c:	0646      	lsls	r6, r0, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0xe8>
 8004a90:	881e      	ldrh	r6, [r3, #0]
 8004a92:	4854      	ldr	r0, [pc, #336]	; (8004be4 <_printf_i+0x244>)
 8004a94:	2f6f      	cmp	r7, #111	; 0x6f
 8004a96:	bf0c      	ite	eq
 8004a98:	2308      	moveq	r3, #8
 8004a9a:	230a      	movne	r3, #10
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aa2:	6865      	ldr	r5, [r4, #4]
 8004aa4:	60a5      	str	r5, [r4, #8]
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	bfa2      	ittt	ge
 8004aaa:	6821      	ldrge	r1, [r4, #0]
 8004aac:	f021 0104 	bicge.w	r1, r1, #4
 8004ab0:	6021      	strge	r1, [r4, #0]
 8004ab2:	b90e      	cbnz	r6, 8004ab8 <_printf_i+0x118>
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	d04d      	beq.n	8004b54 <_printf_i+0x1b4>
 8004ab8:	4615      	mov	r5, r2
 8004aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004abe:	fb03 6711 	mls	r7, r3, r1, r6
 8004ac2:	5dc7      	ldrb	r7, [r0, r7]
 8004ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ac8:	4637      	mov	r7, r6
 8004aca:	42bb      	cmp	r3, r7
 8004acc:	460e      	mov	r6, r1
 8004ace:	d9f4      	bls.n	8004aba <_printf_i+0x11a>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d10b      	bne.n	8004aec <_printf_i+0x14c>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	07de      	lsls	r6, r3, #31
 8004ad8:	d508      	bpl.n	8004aec <_printf_i+0x14c>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6861      	ldr	r1, [r4, #4]
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	bfde      	ittt	le
 8004ae2:	2330      	movle	r3, #48	; 0x30
 8004ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aec:	1b52      	subs	r2, r2, r5
 8004aee:	6122      	str	r2, [r4, #16]
 8004af0:	f8cd a000 	str.w	sl, [sp]
 8004af4:	464b      	mov	r3, r9
 8004af6:	aa03      	add	r2, sp, #12
 8004af8:	4621      	mov	r1, r4
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fee2 	bl	80048c4 <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d14c      	bne.n	8004b9e <_printf_i+0x1fe>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	b004      	add	sp, #16
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0e:	4835      	ldr	r0, [pc, #212]	; (8004be4 <_printf_i+0x244>)
 8004b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b14:	6829      	ldr	r1, [r5, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b1c:	6029      	str	r1, [r5, #0]
 8004b1e:	061d      	lsls	r5, r3, #24
 8004b20:	d514      	bpl.n	8004b4c <_printf_i+0x1ac>
 8004b22:	07df      	lsls	r7, r3, #31
 8004b24:	bf44      	itt	mi
 8004b26:	f043 0320 	orrmi.w	r3, r3, #32
 8004b2a:	6023      	strmi	r3, [r4, #0]
 8004b2c:	b91e      	cbnz	r6, 8004b36 <_printf_i+0x196>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f023 0320 	bic.w	r3, r3, #32
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	2310      	movs	r3, #16
 8004b38:	e7b0      	b.n	8004a9c <_printf_i+0xfc>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	2378      	movs	r3, #120	; 0x78
 8004b44:	4828      	ldr	r0, [pc, #160]	; (8004be8 <_printf_i+0x248>)
 8004b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b4a:	e7e3      	b.n	8004b14 <_printf_i+0x174>
 8004b4c:	0659      	lsls	r1, r3, #25
 8004b4e:	bf48      	it	mi
 8004b50:	b2b6      	uxthmi	r6, r6
 8004b52:	e7e6      	b.n	8004b22 <_printf_i+0x182>
 8004b54:	4615      	mov	r5, r2
 8004b56:	e7bb      	b.n	8004ad0 <_printf_i+0x130>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	6826      	ldr	r6, [r4, #0]
 8004b5c:	6961      	ldr	r1, [r4, #20]
 8004b5e:	1d18      	adds	r0, r3, #4
 8004b60:	6028      	str	r0, [r5, #0]
 8004b62:	0635      	lsls	r5, r6, #24
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	d501      	bpl.n	8004b6c <_printf_i+0x1cc>
 8004b68:	6019      	str	r1, [r3, #0]
 8004b6a:	e002      	b.n	8004b72 <_printf_i+0x1d2>
 8004b6c:	0670      	lsls	r0, r6, #25
 8004b6e:	d5fb      	bpl.n	8004b68 <_printf_i+0x1c8>
 8004b70:	8019      	strh	r1, [r3, #0]
 8004b72:	2300      	movs	r3, #0
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	4615      	mov	r5, r2
 8004b78:	e7ba      	b.n	8004af0 <_printf_i+0x150>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	1d1a      	adds	r2, r3, #4
 8004b7e:	602a      	str	r2, [r5, #0]
 8004b80:	681d      	ldr	r5, [r3, #0]
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7fb fbaa 	bl	80002e0 <memchr>
 8004b8c:	b108      	cbz	r0, 8004b92 <_printf_i+0x1f2>
 8004b8e:	1b40      	subs	r0, r0, r5
 8004b90:	6060      	str	r0, [r4, #4]
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	2300      	movs	r3, #0
 8004b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9c:	e7a8      	b.n	8004af0 <_printf_i+0x150>
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	47d0      	blx	sl
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d0ab      	beq.n	8004b04 <_printf_i+0x164>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	079b      	lsls	r3, r3, #30
 8004bb0:	d413      	bmi.n	8004bda <_printf_i+0x23a>
 8004bb2:	68e0      	ldr	r0, [r4, #12]
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	4298      	cmp	r0, r3
 8004bb8:	bfb8      	it	lt
 8004bba:	4618      	movlt	r0, r3
 8004bbc:	e7a4      	b.n	8004b08 <_printf_i+0x168>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	47d0      	blx	sl
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d09b      	beq.n	8004b04 <_printf_i+0x164>
 8004bcc:	3501      	adds	r5, #1
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	9903      	ldr	r1, [sp, #12]
 8004bd2:	1a5b      	subs	r3, r3, r1
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dcf2      	bgt.n	8004bbe <_printf_i+0x21e>
 8004bd8:	e7eb      	b.n	8004bb2 <_printf_i+0x212>
 8004bda:	2500      	movs	r5, #0
 8004bdc:	f104 0619 	add.w	r6, r4, #25
 8004be0:	e7f5      	b.n	8004bce <_printf_i+0x22e>
 8004be2:	bf00      	nop
 8004be4:	08004f2d 	.word	0x08004f2d
 8004be8:	08004f3e 	.word	0x08004f3e

08004bec <memmove>:
 8004bec:	4288      	cmp	r0, r1
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	eb01 0402 	add.w	r4, r1, r2
 8004bf4:	d902      	bls.n	8004bfc <memmove+0x10>
 8004bf6:	4284      	cmp	r4, r0
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	d807      	bhi.n	8004c0c <memmove+0x20>
 8004bfc:	1e43      	subs	r3, r0, #1
 8004bfe:	42a1      	cmp	r1, r4
 8004c00:	d008      	beq.n	8004c14 <memmove+0x28>
 8004c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c0a:	e7f8      	b.n	8004bfe <memmove+0x12>
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4601      	mov	r1, r0
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d100      	bne.n	8004c16 <memmove+0x2a>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1e:	e7f7      	b.n	8004c10 <memmove+0x24>

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d044      	beq.n	8004cb0 <_free_r+0x90>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f000 f913 	bl	8004e60 <__malloc_lock>
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <_free_r+0x94>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	b933      	cbnz	r3, 8004c50 <_free_r+0x30>
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	6014      	str	r4, [r2, #0]
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4c:	f000 b90e 	b.w	8004e6c <__malloc_unlock>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d908      	bls.n	8004c66 <_free_r+0x46>
 8004c54:	6825      	ldr	r5, [r4, #0]
 8004c56:	1961      	adds	r1, r4, r5
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	bf01      	itttt	eq
 8004c5c:	6819      	ldreq	r1, [r3, #0]
 8004c5e:	685b      	ldreq	r3, [r3, #4]
 8004c60:	1949      	addeq	r1, r1, r5
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	e7ed      	b.n	8004c42 <_free_r+0x22>
 8004c66:	461a      	mov	r2, r3
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b10b      	cbz	r3, 8004c70 <_free_r+0x50>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d9fa      	bls.n	8004c66 <_free_r+0x46>
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	1855      	adds	r5, r2, r1
 8004c74:	42a5      	cmp	r5, r4
 8004c76:	d10b      	bne.n	8004c90 <_free_r+0x70>
 8004c78:	6824      	ldr	r4, [r4, #0]
 8004c7a:	4421      	add	r1, r4
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	d1e0      	bne.n	8004c46 <_free_r+0x26>
 8004c84:	681c      	ldr	r4, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	4421      	add	r1, r4
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	e7da      	b.n	8004c46 <_free_r+0x26>
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x78>
 8004c92:	230c      	movs	r3, #12
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e7d6      	b.n	8004c46 <_free_r+0x26>
 8004c98:	6825      	ldr	r5, [r4, #0]
 8004c9a:	1961      	adds	r1, r4, r5
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf04      	itt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	bf04      	itt	eq
 8004ca8:	1949      	addeq	r1, r1, r5
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6054      	str	r4, [r2, #4]
 8004cae:	e7ca      	b.n	8004c46 <_free_r+0x26>
 8004cb0:	b003      	add	sp, #12
 8004cb2:	bd30      	pop	{r4, r5, pc}
 8004cb4:	24000194 	.word	0x24000194

08004cb8 <sbrk_aligned>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4e0e      	ldr	r6, [pc, #56]	; (8004cf4 <sbrk_aligned+0x3c>)
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	6831      	ldr	r1, [r6, #0]
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	b911      	cbnz	r1, 8004cca <sbrk_aligned+0x12>
 8004cc4:	f000 f8bc 	bl	8004e40 <_sbrk_r>
 8004cc8:	6030      	str	r0, [r6, #0]
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f8b7 	bl	8004e40 <_sbrk_r>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d00a      	beq.n	8004cec <sbrk_aligned+0x34>
 8004cd6:	1cc4      	adds	r4, r0, #3
 8004cd8:	f024 0403 	bic.w	r4, r4, #3
 8004cdc:	42a0      	cmp	r0, r4
 8004cde:	d007      	beq.n	8004cf0 <sbrk_aligned+0x38>
 8004ce0:	1a21      	subs	r1, r4, r0
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f8ac 	bl	8004e40 <_sbrk_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d101      	bne.n	8004cf0 <sbrk_aligned+0x38>
 8004cec:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	24000198 	.word	0x24000198

08004cf8 <_malloc_r>:
 8004cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfc:	1ccd      	adds	r5, r1, #3
 8004cfe:	f025 0503 	bic.w	r5, r5, #3
 8004d02:	3508      	adds	r5, #8
 8004d04:	2d0c      	cmp	r5, #12
 8004d06:	bf38      	it	cc
 8004d08:	250c      	movcc	r5, #12
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	db01      	blt.n	8004d14 <_malloc_r+0x1c>
 8004d10:	42a9      	cmp	r1, r5
 8004d12:	d905      	bls.n	8004d20 <_malloc_r+0x28>
 8004d14:	230c      	movs	r3, #12
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	2600      	movs	r6, #0
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d20:	4e2e      	ldr	r6, [pc, #184]	; (8004ddc <_malloc_r+0xe4>)
 8004d22:	f000 f89d 	bl	8004e60 <__malloc_lock>
 8004d26:	6833      	ldr	r3, [r6, #0]
 8004d28:	461c      	mov	r4, r3
 8004d2a:	bb34      	cbnz	r4, 8004d7a <_malloc_r+0x82>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f7ff ffc2 	bl	8004cb8 <sbrk_aligned>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	4604      	mov	r4, r0
 8004d38:	d14d      	bne.n	8004dd6 <_malloc_r+0xde>
 8004d3a:	6834      	ldr	r4, [r6, #0]
 8004d3c:	4626      	mov	r6, r4
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d140      	bne.n	8004dc4 <_malloc_r+0xcc>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4631      	mov	r1, r6
 8004d46:	4638      	mov	r0, r7
 8004d48:	eb04 0803 	add.w	r8, r4, r3
 8004d4c:	f000 f878 	bl	8004e40 <_sbrk_r>
 8004d50:	4580      	cmp	r8, r0
 8004d52:	d13a      	bne.n	8004dca <_malloc_r+0xd2>
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	3503      	adds	r5, #3
 8004d58:	1a6d      	subs	r5, r5, r1
 8004d5a:	f025 0503 	bic.w	r5, r5, #3
 8004d5e:	3508      	adds	r5, #8
 8004d60:	2d0c      	cmp	r5, #12
 8004d62:	bf38      	it	cc
 8004d64:	250c      	movcc	r5, #12
 8004d66:	4629      	mov	r1, r5
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff ffa5 	bl	8004cb8 <sbrk_aligned>
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d02b      	beq.n	8004dca <_malloc_r+0xd2>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	442b      	add	r3, r5
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	e00e      	b.n	8004d98 <_malloc_r+0xa0>
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	1b52      	subs	r2, r2, r5
 8004d7e:	d41e      	bmi.n	8004dbe <_malloc_r+0xc6>
 8004d80:	2a0b      	cmp	r2, #11
 8004d82:	d916      	bls.n	8004db2 <_malloc_r+0xba>
 8004d84:	1961      	adds	r1, r4, r5
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	6025      	str	r5, [r4, #0]
 8004d8a:	bf18      	it	ne
 8004d8c:	6059      	strne	r1, [r3, #4]
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	bf08      	it	eq
 8004d92:	6031      	streq	r1, [r6, #0]
 8004d94:	5162      	str	r2, [r4, r5]
 8004d96:	604b      	str	r3, [r1, #4]
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f104 060b 	add.w	r6, r4, #11
 8004d9e:	f000 f865 	bl	8004e6c <__malloc_unlock>
 8004da2:	f026 0607 	bic.w	r6, r6, #7
 8004da6:	1d23      	adds	r3, r4, #4
 8004da8:	1af2      	subs	r2, r6, r3
 8004daa:	d0b6      	beq.n	8004d1a <_malloc_r+0x22>
 8004dac:	1b9b      	subs	r3, r3, r6
 8004dae:	50a3      	str	r3, [r4, r2]
 8004db0:	e7b3      	b.n	8004d1a <_malloc_r+0x22>
 8004db2:	6862      	ldr	r2, [r4, #4]
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	bf0c      	ite	eq
 8004db8:	6032      	streq	r2, [r6, #0]
 8004dba:	605a      	strne	r2, [r3, #4]
 8004dbc:	e7ec      	b.n	8004d98 <_malloc_r+0xa0>
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	6864      	ldr	r4, [r4, #4]
 8004dc2:	e7b2      	b.n	8004d2a <_malloc_r+0x32>
 8004dc4:	4634      	mov	r4, r6
 8004dc6:	6876      	ldr	r6, [r6, #4]
 8004dc8:	e7b9      	b.n	8004d3e <_malloc_r+0x46>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f000 f84c 	bl	8004e6c <__malloc_unlock>
 8004dd4:	e7a1      	b.n	8004d1a <_malloc_r+0x22>
 8004dd6:	6025      	str	r5, [r4, #0]
 8004dd8:	e7de      	b.n	8004d98 <_malloc_r+0xa0>
 8004dda:	bf00      	nop
 8004ddc:	24000194 	.word	0x24000194

08004de0 <_realloc_r>:
 8004de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de4:	4680      	mov	r8, r0
 8004de6:	4614      	mov	r4, r2
 8004de8:	460e      	mov	r6, r1
 8004dea:	b921      	cbnz	r1, 8004df6 <_realloc_r+0x16>
 8004dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	4611      	mov	r1, r2
 8004df2:	f7ff bf81 	b.w	8004cf8 <_malloc_r>
 8004df6:	b92a      	cbnz	r2, 8004e04 <_realloc_r+0x24>
 8004df8:	f7ff ff12 	bl	8004c20 <_free_r>
 8004dfc:	4625      	mov	r5, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e04:	f000 f838 	bl	8004e78 <_malloc_usable_size_r>
 8004e08:	4284      	cmp	r4, r0
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	d802      	bhi.n	8004e14 <_realloc_r+0x34>
 8004e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e12:	d812      	bhi.n	8004e3a <_realloc_r+0x5a>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7ff ff6e 	bl	8004cf8 <_malloc_r>
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d0ed      	beq.n	8004dfe <_realloc_r+0x1e>
 8004e22:	42bc      	cmp	r4, r7
 8004e24:	4622      	mov	r2, r4
 8004e26:	4631      	mov	r1, r6
 8004e28:	bf28      	it	cs
 8004e2a:	463a      	movcs	r2, r7
 8004e2c:	f7ff fbb8 	bl	80045a0 <memcpy>
 8004e30:	4631      	mov	r1, r6
 8004e32:	4640      	mov	r0, r8
 8004e34:	f7ff fef4 	bl	8004c20 <_free_r>
 8004e38:	e7e1      	b.n	8004dfe <_realloc_r+0x1e>
 8004e3a:	4635      	mov	r5, r6
 8004e3c:	e7df      	b.n	8004dfe <_realloc_r+0x1e>
	...

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fb fd02 	bl	8000854 <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	2400019c 	.word	0x2400019c

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_lock+0x8>)
 8004e62:	f000 b811 	b.w	8004e88 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	240001a0 	.word	0x240001a0

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f000 b80c 	b.w	8004e8a <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	240001a0 	.word	0x240001a0

08004e78 <_malloc_usable_size_r>:
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f18      	subs	r0, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbc      	itt	lt
 8004e82:	580b      	ldrlt	r3, [r1, r0]
 8004e84:	18c0      	addlt	r0, r0, r3
 8004e86:	4770      	bx	lr

08004e88 <__retarget_lock_acquire_recursive>:
 8004e88:	4770      	bx	lr

08004e8a <__retarget_lock_release_recursive>:
 8004e8a:	4770      	bx	lr

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
